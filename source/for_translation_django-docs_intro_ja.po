# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# xiu1 <d84ea@hotmail.co.jp>, 2015
# Hiroki KIYOHARA <hirokiky@gmail.com>, 2013-2014
# Hiroshi Yamaki <hiroshi.yamaki@gmail.com>, 2015
# Kenjiro Kosaka <inoshirou@gmail.com>, 2014
# Kosei Kitahara <information@surgo.jp>, 2013
# Satoshi Tsuyama <tsuyama@nike.eonet.ne.jp>, 2014
# Takuya Arita <takuya.arita@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-26 02:09-0500\n"
"PO-Revision-Date: 2015-07-27 09:59+0900\n"
"Last-Translator: Hiroshi Miura <miurahr@linux.com>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/django-docs/"
"language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.5.4\n"

# 7f98803d937c49078c5a93864f013c9a
#: ../../../../1.8/docs/intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr "Django への初めてのパッチを書く"

# 47bd6b1acbe94099b5f156d6606ff4eb
#: ../../../../1.8/docs/intro/contributing.txt:6
msgid "Introduction"
msgstr "はじめに"

# fb02824b3186412a8595da59d4a34069
#: ../../../../1.8/docs/intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature "
"you want added."
msgstr ""
"少しでもコミュニティへ恩返しをしたいと思われますか? それは Django の簡単なバ"
"グフィックスや小さな機能追加かもしれません。"

# ba8812ee6ae1434d95a22303bd704866
#: ../../../../1.8/docs/intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""
"その願いを叶える最適な方法は Django 自体への貢献です。最初は気が重いかもしれ"
"ませんが、実際はとても簡単です。私達がプロセス全体を詳しく解説するので、その"
"例から学ぶことができるでしょう。"

# 5d1605975bb0407c916c43e6c2922caf
#: ../../../../1.8/docs/intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr "このチュートリアルは誰を対象としていますか?"

# 8403f4e8248a402d91d0e6d9ad1f847e
#: ../../../../1.8/docs/intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of "
"how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app</intro/"
"tutorial01>`. In addition, you should have a good understanding of Python "
"itself. But if you don't, `Dive Into Python`__ is a fantastic (and free) "
"online book for beginning Python programmers."
msgstr ""
"このチュートリアルは、少なくとも Django がどのように動作しているかの基本的な"
"理解があることを想定しています。つまりチュートリアル :doc:`初めての Django ア"
"プリ</intro/tutorial01>` を十分に理解していることを想定しています。また、"
"Python 自体をよく理解している必要があります。もしそうでない場合、 `Dive Into "
"Python`__ は Python プログラマーになるための素晴らしい (かつ無料の) オンライ"
"ンドキュメントです。"

# bd3dd061355742beb44eb8827062d75e
#: ../../../../1.8/docs/intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get "
"started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""
"バージョン管理システムと Trac をよく知らない方でも、このチュートリアルとリン"
"ク先から、始めるに十分な情報を得ることができます。しかし、Django に定期的に貢"
"献したい場合は、このツールの詳細について知りたいかもしれません。"

# fcb17d371e274d268e4ce5ac9bea6dcd
#: ../../../../1.8/docs/intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""
"このチュートリアルでは、できるだけ多くの方が使用できるように可能な限り解説し"
"たいと思います。"

# a741d561091143b6bfab7b9954f1bfbf
# c8ed0037729948498278444057447dd6
#: ../../../../1.8/docs/intro/contributing.txt:34
#: ../../../../1.8/docs/intro/tutorial01.txt:35
msgid "Where to get help:"
msgstr "困ったときは:"

# e74f374903fa47708b10ca1aa82f5a27
#: ../../../../1.8/docs/intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to |django-developers| or drop by `#django-dev on irc.freenode.net`__ to "
"chat with other Django users who might be able to help."
msgstr ""

# 043edba3bd1948b7851402547d952d96
#: ../../../../1.8/docs/intro/contributing.txt:44
msgid "What does this tutorial cover?"
msgstr "このチュートリアルの範囲はなんですか?"

# d146545330c441eca449738152e5800b
#: ../../../../1.8/docs/intro/contributing.txt:46
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""
"初めて Django にパッチを送る手順を詳しく解説します。このチュートリアルを終え"
"ると、関連するツールとプロセス両方についての基本的な理解を得ることができま"
"す。具体的な範囲は以下の通りです:"

# 69d5644dece24be1af1c8f695ef77f03
#: ../../../../1.8/docs/intro/contributing.txt:50
msgid "Installing Git."
msgstr "Git のインストール"

# e9f4a6a6778448d48a3334f84bbe9ad6
#: ../../../../1.8/docs/intro/contributing.txt:51
msgid "How to download a development copy of Django."
msgstr "開発版の Django の複製をダウンロード"

# 24d537318f3a474f9fb2c72146e10e2d
#: ../../../../1.8/docs/intro/contributing.txt:52
msgid "Running Django's test suite."
msgstr "Django のテストスイートの実行"

# 4a3df8940b924d6981ff7f34d7654e11
#: ../../../../1.8/docs/intro/contributing.txt:53
msgid "Writing a test for your patch."
msgstr "パッチへのテストを書く"

# a8e7fa8bd8d0405aa22cdca75b71214d
#: ../../../../1.8/docs/intro/contributing.txt:54
msgid "Writing the code for your patch."
msgstr "パッチのコードを書く"

# 295fe7fee1a646d584e310afbd35c5ad
#: ../../../../1.8/docs/intro/contributing.txt:55
msgid "Testing your patch."
msgstr "パッチをテスト"

# 4c691f1ad6064a9aaf84766fd0de0040
#: ../../../../1.8/docs/intro/contributing.txt:56
msgid "Generating a patch file for your changes."
msgstr "変更のパッチファイルを生成"

# d16adc25f49e459089d9f6220b0b9e3d
#: ../../../../1.8/docs/intro/contributing.txt:57
msgid "Where to look for more information."
msgstr "より多くの情報を得る方法"

# d7f79d67dda0416f9a2b45822dc0bd00
#: ../../../../1.8/docs/intro/contributing.txt:59
msgid ""
"Once you're done with the tutorial, you can look through the rest of :doc:"
"`Django's documentation on contributing</internals/contributing/index>`. It "
"contains lots of great information and is a must read for anyone who'd like "
"to become a regular contributor to Django. If you've got questions, it's "
"probably got the answers."
msgstr ""
"チュートリアルを終えたら、次は :doc:`Django への貢献</internals/contributing/"
"index>` を参照してください。このドキュメントには、多くの重要な情報が含まれて"
"おり、Django に定期的に貢献したい方は是非一読してください。あなたの疑問への答"
"えが見つかるはずです。"

# 6dd506e98bb5444cb6cea5c7707f329d
#: ../../../../1.8/docs/intro/contributing.txt:66
msgid "Installing Git"
msgstr "Git のインストール"

# 05b0eb6b58d24e83bbcd684fc0ba8d26
#: ../../../../1.8/docs/intro/contributing.txt:68
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""
"このチュートリアルでは、最新の Django 開発版のダウンロードとその変更のパッチ"
"ファイルを生成するために Git をインストールする必要があります。"

# c398c54057ae42b6a20652881d284d67
#: ../../../../1.8/docs/intro/contributing.txt:72
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could not be "
"found, you'll have to download and install it, see `Git's download page`__."
msgstr ""

# b223c750c22342bdae6fab47ba5e4867
#: ../../../../1.8/docs/intro/contributing.txt:76
msgid ""
"If you're not that familiar with Git, you can always find out more about its "
"commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""
"もし Git について詳しく知らない場合は、(インストール後に) コマンドラインから "
"``git help`` と入力するとコマンドの使い方を確認できます。"

# f9a4783ddb004c2c9c5e4e1b6fc0a265
#: ../../../../1.8/docs/intro/contributing.txt:82
msgid "Getting a copy of Django's development version"
msgstr "Django 開発版の複製を取得"

# a8a026875d854e95bd92aa1464fea05b
#: ../../../../1.8/docs/intro/contributing.txt:84
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr ""
"Django への貢献の第一歩はソースコードの複製の取得から始まります。コマンドライ"
"ンで、 ``cd`` コマンドを使い、Django をローカルに複製するディレクトリに移動し"
"ます。"

# 420c1946008c4d4c97490b73c13dfd87
#: ../../../../1.8/docs/intro/contributing.txt:88
msgid ""
"Download the Django source code repository using the following command::"
msgstr "以下のコマンドで Django のソースコードリポジトリをダウンロードします::"

# 724bf5ec3ec34895a16dd05858ab4036
#: ../../../../1.8/docs/intro/contributing.txt:94
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr "`virtualenv`__ を利用したい場合は、次のコマンドを使います::"

# efc2017551954b5b85f890755218f724
#: ../../../../1.8/docs/intro/contributing.txt:98
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``) "
"to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr ""
"(``django`` ディレクトリの複製には ``setup.py`` が含まれています) このコマン"
"ドにより、仮想環境内にこの複製をインストールできます。これにより Django の開"
"発用の複製を他のシステムから分離できるため、パッケージの依存問題から開放され"
"ます。"

# 92ca13223ba24c2493c1581a43120e8b
#: ../../../../1.8/docs/intro/contributing.txt:106
msgid "Rolling back to a previous revision of Django"
msgstr "旧リビジョンの Django に戻す"

# 8d4e21924e96493f9d4a93d268615e12
#: ../../../../1.8/docs/intro/contributing.txt:108
msgid ""
"For this tutorial, we'll be using ticket :ticket:`17549` as a case study, so "
"we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""

# ced48aaf84b94fad99ad18ae20888ac6
#: ../../../../1.8/docs/intro/contributing.txt:113
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk "
"for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a ticket!**"
msgstr ""
"**チュートリアルでは trunk ではない古いリビジョンの Django を使用しますが、自"
"分のパッチを作成する場合は Django の最新の開発版を使用する必要があります!**"

# ac9aec7fe7cb4c3289114bde7022993c
#: ../../../../1.8/docs/intro/contributing.txt:119
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to "
"Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Consequently, "
"we'll be using the revision of Django just prior to that, `commit "
"39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""
"このチケットのパッチは Ulrich Petri 氏により書かれ、これは `commit "
"ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__ で Django に適用されました。よっ"
"て `commit 39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__ が適用される前の "
"Django のリビジョンを使用します。"

# 048627ea11c640d897f9a1ad601f5fd7
#: ../../../../1.8/docs/intro/contributing.txt:127
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""
"Django のルートディレクトリ (このディレクトリには ``django``, ``docs``, "
"``tests``, ``AUTHORS``, 等が含まれています) へ移動します。次にチュートリアル"
"で使用する Django の旧リビジョンをチェックアウトします。"

# fb59fb746d034e01800a25f60949a6e7
#: ../../../../1.8/docs/intro/contributing.txt:134
msgid "Running Django's test suite for the first time"
msgstr "最初に Django のテストスイートを実行する"

# 2da72e1223594a52a7cff4370a0c9c7e
#: ../../../../1.8/docs/intro/contributing.txt:136
msgid ""
"When contributing to Django it's very important that your code changes don't "
"introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""
"Django へ貢献する際、変更したコードが Django の他の領域にバグをの変更はジャン"
"ゴの他の領域にバグを混入しないことが非常に重要です。変更後に Django の正常動"
"作を確認するには Django のテストスイートを実行します。すべてのテストに合格し"
"た場合は、その変更により Django が壊れていないことが確認できます。Django のテ"
"ストスイートを実行したことが一度もない場合、その出力結果を把握しておくため"
"に、一度テストスイートを実行しておくことを推奨します。"

# 9405ad02187d4005b0e693162b08db9b
#: ../../../../1.8/docs/intro/contributing.txt:144
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""
"テストスイートの実行は Django の ``tests/`` ディレクトリに `cd`` で移動し、"
"GNU/Linux, Mac OS X 等 Unix 系 OS を利用している場合は以下のコマンドを実行し"
"ます::"

# 5be9026c6a9845bfba4620cdf2c62bd8
#: ../../../../1.8/docs/intro/contributing.txt:150
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""
"Windows の場合は、Git のデフォルトインストールで提供される \"Git Bash\" を使"
"用することにより上記コマンドが実行できます。GitHub には `素敵なチュートリアル"
"`__ があります。"

# 628ed4235f22408f828d077e6d3b3883
#: ../../../../1.8/docs/intro/contributing.txt:157
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""
"もし ``virtualenv`` を利用している場合は、テストの実行に ``PYTHONPATH=..`` の"
"ステップは不要です。これは Python が Django を見に行く際に ``tests`` の親ディ"
"レクトリを見に行くようにします。 ``virtualenv`` が自動的に Django を "
"``PYTHONPATH`` 上に追加します。"

# 73976a3294204b85add3659e149d77cc
#: ../../../../1.8/docs/intro/contributing.txt:162
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the "
"speed of your computer."
msgstr ""
"それでは一息つきましょう。Django 全体のテストスイートは 4800 以上のテストが含"
"まれており、コンピュータの速度により 5 〜 15分程度かかります。"

# 99614aed41264018b766ab80f527970b
#: ../../../../1.8/docs/intro/contributing.txt:166
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions "
"failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""
"Django のテストスイートを実行中に、各テストの状態を文字のストリームで確認する"
"ことができます。 ``E`` はテストにエラーが発生したことを表し、 ``F`` はテスト"
"のアサーションが失敗したことを表しています。これらは共にテスト失敗となりま"
"す。``x`` と ``s`` はそれぞれ期待する失敗とスキップを表しています。ドットはテ"
"ストの成功を表しています。"

# 9125dc1d2e61494092203bbc9e689b30
#: ../../../../1.8/docs/intro/contributing.txt:173
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you "
"are making (we won't need any for this tutorial)."
msgstr ""
"スキップされたテストは、テストを実行するために必要な外部ライブラリがインス"
"トールされていないことが原因です; 依存については :ref:`running-unit-tests-"
"dependencies` を参照し、関連するテストを実行してください (このチュートリアル"
"では必要ありません)。"

# 206c3462d31b492bad1a534c1f8080e5
#: ../../../../1.8/docs/intro/contributing.txt:178
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information."
msgstr ""
"テストが終了するとテストが成功したか､失敗したかを知らせるメッセージが表示され"
"ます｡まだ Django のコードに変更を加えていなければ､テストは全て **パスするはず"
"です** ｡もし失敗するかエラーが起こる場合は､これまでの全ステップを適切に実行し"
"てください｡ :ref:`running-unit-tests` で､よりテストについて知れます｡"

# 8456b7744a02478cb75a9ad7f950d8cf
#: ../../../../1.8/docs/intro/contributing.txt:184
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken "
"down by Python version and database backend."
msgstr ""
"開発中の､最新の Django ではステーブルとは限りません｡トランクバージョンで開発"
"を行う場合､ `Django の継続インテグレーションビルド`__ をチェックしてください｡"
"これで､テストの失敗があなたのマシンだけのものか､ Django 公式のビルドによるも"
"のかが分かります｡各ビルドについてのリンクをクリックすれば､ \"Configuration "
"Matrix\" という､ 各 Python のバージョン､ DB バックエンドに対応したテストの失"
"敗を閲覧できます｡"

# 17fdfd690d4942109e8585d5c3d272ae
#: ../../../../1.8/docs/intro/contributing.txt:195
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is "
"sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`."
msgstr ""
"このチュートリアルや､各チケットで作業する際は､ SQLite のテストで十分です｡しか"
"し可能 (か必要な場合は) :ref:`他のデータベースでテストを実行する <running-"
"unit-tests-settings>` を参照してください｡"

# b67d98de27d94abaa7dec0912a17e124
#: ../../../../1.8/docs/intro/contributing.txt:201
msgid "Writing some tests for your ticket"
msgstr "チケットにテストを書く"

# c71624b0b9a04b8b87e2e16ddf6e5a3a
#: ../../../../1.8/docs/intro/contributing.txt:203
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists "
"and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""
"大抵の場合､ Django にアクセプトされるパッチはテストを含んでいます｡リグレッ"
"ションテストを書くことで､ Django にバグを再混入していないと後に保証できます｡"
"レグレッションテストは､バグが存在しているときに落ちるように書き､バグが修正さ"
"れた後にパスするように書かれるべきです｡新機能を含むパッチでは､その新機能が正"
"しく動作すると保証するためにテストが必要です｡その際も同じように､新機能が無い"
"際には落ち､実装されてから通るテストを書くべきです｡"

# 0b72ece7fa8f409ea77e401db3c8e255
#: ../../../../1.8/docs/intro/contributing.txt:212
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet). "
"If your new tests don't fail, you'll need to fix them so that they do. After "
"all, a regression test that passes regardless of whether a bug is present is "
"not very helpful at preventing that bug from reoccurring down the road."
msgstr ""
"これをするには､コードに変更を加える前に先にテストを書くのが良いでしょう｡この"
"開発手法は `テスト駆動開発`__ と呼ばれ､プロジェクト全体にも単一のパッチにも適"
"応可能です｡テストを書いた後には､テストを走らせて確かに落ちることを確認します "
"(バグ修正や昨日の追加はまだしてないので落ちます)｡ 新しいテストが落ちない場合"
"は落ちるよう修正しましょう｡ともかく､バグが存在していようとも通るテストは将来"
"バグが再発するのを防ぐのに､何の役にもたちません｡"

# b5de8089a23f4bbd9256b17b7f706075
#: ../../../../1.8/docs/intro/contributing.txt:221
msgid "Now for our hands-on example."
msgstr "ハンズオンでの例題"

# 5a8f1685dc6840729cec6562a2da12af
#: ../../../../1.8/docs/intro/contributing.txt:226
msgid "Writing some tests for ticket #17549"
msgstr "チケット #17549 にテストを書いてみましょう"

# 5b8509ff1cc945bbae0024c381bccf19
#: ../../../../1.8/docs/intro/contributing.txt:228
msgid "Ticket :ticket:`17549` describes the following, small feature addition:"
msgstr ""

# 083bff3be5344c8f9c0f73a4954de94c
#: ../../../../1.8/docs/intro/contributing.txt:230
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""
"URLField は URL を開けるようにするのに便利です; CharField を使ってもかまいま"
"せん｡"

# cb244b13ea644e92bd19a0ebf8f1bf8d
#: ../../../../1.8/docs/intro/contributing.txt:233
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input "
"widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""
"このチケットを解決するには､ ``render`` メソッドを ``AdminURLFieldWidget`` に"
"追加します｡ input ウィジェットの上にクリック可能なリンクをするようにします｡変"
"更を加える前に､変更が正しく動作し､これからも動作し続けることを確認するために"
"テストをいくつか追加します｡"

# 3b15a1dce0c84740b13d5f97a56a0543
#: ../../../../1.8/docs/intro/contributing.txt:239
msgid ""
"Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and "
"open the ``tests.py`` file. Add the following code on line 269 right before "
"the ``AdminFileWidgetTest`` class::"
msgstr ""

# 45490639d16d48cbbb88501a8ee28692
#: ../../../../1.8/docs/intro/contributing.txt:273
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""
"新しいテストでは ``render`` メソッドをチェックするもので､いくつかのシチュエー"
"ションで正しく動作することを確認します｡"

# 7a892eaf741c48b7ae49aba96d997aa1
#: ../../../../1.8/docs/intro/contributing.txt:276
msgid "But this testing thing looks kinda hard..."
msgstr ""

# 1cd76365eb7540b6a2c2e36e4d87e543
#: ../../../../1.8/docs/intro/contributing.txt:278
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""
"テストを書いたとこがない場合は､最初は難しく見えるかもしれません｡ですが実は､テ"
"スティングはプログラミングにおいて *とても* 重要なことです｡ここではテストにつ"
"いて詳細に紹介します｡"

# c9fefd198ed646c29a9d9094e7acb880
#: ../../../../1.8/docs/intro/contributing.txt:282
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`/topics/testing/overview`."
msgstr ""

# b39175f7896b40bbb42cd08674743be5
#: ../../../../1.8/docs/intro/contributing.txt:284
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""
"Dive Into Python (Python初心者のための､オンラインの無料の本) では素晴らしい `"
"初めてのユニットテスト`__ という章があります｡"

# 10eccbb363a74c34afd9b9f65f6baf77
#: ../../../../1.8/docs/intro/contributing.txt:286
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""
"Dive Into Python を読んだあと､もう少し情報が欲しい場合は `Python のユニットテ"
"スト`__ のドキュメントを参照してください｡"

# 4f50e377156246869a8c931bab2f1f36
#: ../../../../1.8/docs/intro/contributing.txt:293
msgid "Running your new test"
msgstr "新しいテストを走らせる"

# fd288e277e3f431e805563f2d0d85db5
#: ../../../../1.8/docs/intro/contributing.txt:295
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""
"``AdminURLFieldWidget`` にはまだ変更を加えていませんので､テストは落ちます｡ "
"``model__forms_regress`` フォルダの全テストを走らせて､実際に何が起こるか観て"
"みましょう｡コマンドラインで ``tests/`` ディレクトリに ``cd`` して､以下を実行"
"してください::"

# b1f1c4c935c94bbfb249bf647e759dfd
#: ../../../../1.8/docs/intro/contributing.txt:303
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate "
"folder and class."
msgstr ""
"テストが正しく実行されれば､追加したテストメソッドに対応する3つのテストが失敗"
"するでしょう｡テストがすべて通れば､上記した新しいテストを正しいフォルダ､クラス"
"に追加したことを確認してください｡"

# da1b5706cc234051bc8ffe5e3c9f2d33
#: ../../../../1.8/docs/intro/contributing.txt:309
msgid "Writing the code for your ticket"
msgstr "チケットにコードを書く"

# c997f9e03b304741b4a5ec668fb28eee
#: ../../../../1.8/docs/intro/contributing.txt:311
msgid ""
"Next we'll be adding the functionality described in ticket :ticket:`17549` "
"to Django."
msgstr ""

# f6ad58c42359475eaa5e0250c552f2de
#: ../../../../1.8/docs/intro/contributing.txt:315
msgid "Writing the code for ticket #17549"
msgstr "チケット #17549 にコードを書く"

# 7ed5219fd9f842839ac99570c7c0cdc4
#: ../../../../1.8/docs/intro/contributing.txt:317
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""
"``django/django/contrib/admin`` フォルダーに行って､ ``widgets.py`` ファイルを"
"開いてください｡\n"
"302行目にある ``AdminURLFieldWidget`` クラスを見つけて､以下の ``render`` メ"
"ソッドをすでにある ``__init__`` メソッドの下に追加してください::"

# cabc84dcc7134c7a8f3a213ed4c2d167
#: ../../../../1.8/docs/intro/contributing.txt:334
msgid "Verifying your test now passes"
msgstr "テストが通ることを確認する"

# 0a3eb0a90b2c4849b4d90217feed594c
#: ../../../../1.8/docs/intro/contributing.txt:336
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working "
"correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into the "
"Django ``tests/`` directory and run::"
msgstr ""
"Django への変更が完了したあと､コードが正しく動作すると確認するため､先ほど書い"
"たテストを実行してください｡Djangoの ``admin_widgets`` フォルダーに ``cd`` で"
"移動して､以下を実行してください::"

# e7a1d5d2873d4d70b59cdd7a6945cb95
#: ../../../../1.8/docs/intro/contributing.txt:343
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""
"あぁ､テストを書いていて良かったですね｡以下のように3つテストが落ちています::"

# 5e14fe7064f848ea80a310a7d5abcb28
#: ../../../../1.8/docs/intro/contributing.txt:348
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of ``django/contrib/admin/"
"widgets.py`` so it looks as follows::"
msgstr ""
"メソッドで使うモジュールのインポートを忘れていました｡ ``smartr_urlquote`` の"
"インポートを ``django/contrib/admin/widgets.py`` の 13 行目の後ろに追加してく"
"ださい｡"

# d74956a51a9d4dd0b332ed5d335eb831
#: ../../../../1.8/docs/intro/contributing.txt:354
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""
"再実行すればテストがすべてパスするはずです｡もしそうでない場合､ "
"``AdminURLFieldWidgt`` クラスと新しいテストが正しくコピーされているされている"
"と確認してください｡"

# 456c57e411924632a9b36a72d2e9f9b9
#: ../../../../1.8/docs/intro/contributing.txt:359
msgid "Running Django's test suite for the second time"
msgstr "Django の テストスイートをもう一度走らせる"

# 9dd32fa3ae0b42929aaabf3e685d5997
#: ../../../../1.8/docs/intro/contributing.txt:361
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""
"パッチとテストが正しく動作していることを確認できたら､ Django のテストをすべて"
"走らせて､変更が Django の別の場所にバグを仕込んでいないか確認しましょう｡すべ"
"てのテストが通るという事は､追加したコードがバグフリーだと保証します｡大量のバ"
"グや手戻りを発見できます｡そうでないとバグを見逃してしまうでしょう｡"

# 49cfc394592540fba9dc5f43d55d0f01
#: ../../../../1.8/docs/intro/contributing.txt:367
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""
"Django の全てのテストスイートを走らせるには ``cd`` で Django の ``tests/`` "
"ディレクトリ移動して実行してください::"

# 904d83ebdd694062be380df9ec7e6098
#: ../../../../1.8/docs/intro/contributing.txt:372
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix "
"also made a `small CSS change`__ to format the new widget. You can make the "
"change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""
"テストが失敗しなければ､先に進みましょう｡このチケットでは `少し CSS を変更`__ "
"して新しいウィジェットをフォーマットします｡もしやりたいならやってもいいです"
"が､ここでは省略します｡"

# dcd6b7786b7041e8bd0ef891ce75a4c0
#: ../../../../1.8/docs/intro/contributing.txt:379
msgid "Writing Documentation"
msgstr "ドキュメントを書く"

# 09847bc22a4b429cb7c6d8616e8cd10b
#: ../../../../1.8/docs/intro/contributing.txt:381
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""
"この機能は新しいので､ドキュメントに書かれるべきです｡ 以下のコードを ``django/"
"docs/ref/models/fields.txt`` の 925 行目にある ``URLField`` のドキュメントの"
"下に追記してください｡"

# 3d91b3b6dca646fc83ea8f77bf3ea475
#: ../../../../1.8/docs/intro/contributing.txt:390
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see :doc:`/internals/"
"contributing/writing-documentation`. That page also includes an explanation "
"of how to build a copy of the documentation locally, so you can preview the "
"HTML that will be generated."
msgstr ""
"ドキュメントの書き方についてもっと知りたい場合は :doc:`/internals/"
"contributing/writing-documentation` を参照してください｡ここでは､ "
"``versionadded` の書き方についてや､ ドキュメントのコピーをローカルでビルドし"
"てみて､ HTML をプレビューする方法などが書かれています｡"

# c07b3084c2324f238c4355fdf8679915
#: ../../../../1.8/docs/intro/contributing.txt:397
msgid "Generating a patch for your changes"
msgstr "変更のパッチを生成する"

# b1a01858176d4b469b65e5e1d7d9f1d2
#: ../../../../1.8/docs/intro/contributing.txt:399
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""
"Trac にアップロードされたり､他のDjangoに適応されるパッチを作りましょう｡パッチ"
"の内容を見るために､以下のコマンドを実行してください::"

# e025830b22c840efa76d48e6ec1163ff
#: ../../../../1.8/docs/intro/contributing.txt:405
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the "
"tutorial."
msgstr ""
"チュートリアルの初めでチェックアウトした最初のリビジョンと､(修正した) 現在の "
"Django のコピーとの違いを表示します｡"

# 7c21508a8de546fe961237503d78dd8c
#: ../../../../1.8/docs/intro/contributing.txt:409
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the "
"command line.  If the patch's content looked okay, you can run the following "
"command to save the patch file to your current working directory::"
msgstr ""
"パッチを見終わったら､ ``q`` キーをタイプしたコマンドラインに戻りましょう｡パッ"
"チの内容が良さそうなら､以下のコマンドを実行して､現在のワーキングディレクトリ"
"にパッチを保存してください｡"

# 9a3b84d3838e466e8052dc9a4f832b69
#: ../../../../1.8/docs/intro/contributing.txt:415
msgid ""
"You should now have a file in the root Django directory called ``17549."
"diff``. This patch file contains all your changes and should look this:"
msgstr ""
"Django のルートディレクトリに ``17549.diff`` というファイルが作られるでしょ"
"う｡このパッチは変更のすべてを含んでおり､このようになります:"

# d5d6c167700743ad827b9c192cee2686
#: ../../../../1.8/docs/intro/contributing.txt:510
msgid "So what do I do next?"
msgstr "次はどうしましょうか?"

# 58f50ae80cfa4ebcbd5c84441992f903
#: ../../../../1.8/docs/intro/contributing.txt:512
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a "
"more :doc:`git oriented workflow </internals/contributing/writing-code/"
"working-with-git>` is recommended."
msgstr ""
"おめでとうございます! Django への最初のパッチができました! パッチの書き方を習"
"得したので､ Django のコードベースを改善するためにスキルを活かしましょう｡パッ"
"チを生成して､Tracのチケットに貼り付けるのは便利ですが､ git を使っている場合"
"は､ `git ワークフロー </internals/contributing/writing-code/working-with-"
"git>`_ の利用がオススメです｡"

# ee47c721b5bf47d9b570809aa4cc3cf6
#: ../../../../1.8/docs/intro/contributing.txt:519
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""
"変更をローカルでコミットしなかった場合は､ git のブランチを始めに戻すために以"
"下を実行してください::"

# b49d483d7bc743319b54d22d1a51024c
#: ../../../../1.8/docs/intro/contributing.txt:526
msgid "More information for new contributors"
msgstr "新しい貢献者のための情報"

# ea36effe7f4f415bbfe377230a8f9e21
#: ../../../../1.8/docs/intro/contributing.txt:528
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""
"Django へのパッチを書き始める前に､貢献するために見ておいたほうがいい情報があ"
"ります:"

# 9600b400ad7240e18e70b4f52628cc0f
#: ../../../../1.8/docs/intro/contributing.txt:531
msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting patches </internals/contributing/writing-code/"
"submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""
"Django のドキュメントの `チケットをクレームして､パッチを送信する </internals/"
"contributing/writing-code/submitting-patches>`_ を読んでください｡ Trac でのエ"
"チケットやチケットをクレームする方法やパッチに適切なコーディングスタイルなど､"
"重要なことを網羅できます｡"

# 5462e109e989457ebe1a72c1563b9dba
#: ../../../../1.8/docs/intro/contributing.txt:536
msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""
"Django への初めての貢献者は :doc:`初めての貢献者へのドキュメント </internals/"
"contributing/new-contributors/>` を読んでください｡Django に初めて協力する人た"
"ちへの良いアドバイスがあります｡"

# 6b64f5e9c6f6463d9451e278aa56aba6
#: ../../../../1.8/docs/intro/contributing.txt:540
msgid ""
"After those, if you're still hungry for more information about contributing, "
"you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""
"貢献について､より多くの情報を知りたいなら､ :doc:`貢献についての Django のド"
"キュメント </internals/contributing/index>` を参照してください｡そこにはたくさ"
"ん有用な情報がありまし､質問があれば､このドキュメントが1番役に立ちます｡"

# 199ed598e2dc43f9ac1a47a94d51cd02
#: ../../../../1.8/docs/intro/contributing.txt:547
msgid "Finding your first real ticket"
msgstr "実際にチケットを探してみましょう"

# b4a8f5bb467549dbbfd42aab3821f197
#: ../../../../1.8/docs/intro/contributing.txt:549
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are "
"often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing "
"patches for more difficult and complicated tickets."
msgstr ""
"ドキュメントをたくさん読んだ後は､実際のパッチを書けるのでチケットを探してみま"
"しょう｡ \"easy picking\" タグが付いたチケットを見つけてください｡このチケット"
"は大抵はより簡単なものなので､初めての貢献者には適切でしょう｡ Django への貢献"
"に慣れてきたあとは､難しく､複雑なチケットを書き始めれるでしょう｡"

# a45e9b64bcdd41c69618973b16b21f9b
#: ../../../../1.8/docs/intro/contributing.txt:556
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on :doc:"
"`claiming tickets and submitting patches </internals/contributing/writing-"
"code/submitting-patches>`."
msgstr ""
"今すぐ始めたいなら (責める人はいません！)、　`パッチが必要な簡単なチケット"
"`__ か `パッチに改善が必要な簡単なチケット`__ を見つけましょう。テストを書き"
"なれているなら `テストが必要な簡単なチケット`__ でもよいでしょう。ただ、チ"
"ケットのクレームに関するガイドラインに従ってください。 Django ドキュメント"
"の :doc:`チケットをクレームしてパッチを送る </internals/contributing/writing-"
"code/submitting-patches>` で記述されています。"

# fbdc2d9bcc7c41f5a703deb7e4deb630
# 422133cfe1b64c40b6d46e133fc94342
# 88ae285a25e94e77a960a811300b3e21
#: ../../../../1.8/docs/intro/contributing.txt:570
#: ../../../../1.8/docs/intro/tutorial05.txt:687
#: ../../../../1.8/docs/intro/tutorial06.txt:120
msgid "What's next?"
msgstr "次は何をしましょうか？"

# d5c897cad98f432d94230d119d80eb9c
#: ../../../../1.8/docs/intro/contributing.txt:572
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes. "
"After uploading a patch or submitting a pull request, be sure to update the "
"ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See :doc:`/internals/"
"contributing/triaging-tickets` for details."
msgstr ""
"チケットにパッチが追加されたあとは、別の人間の目でレビューされる必要がありま"
"す。パッチをアップロードしたりプルリクエストを送信したあとは、チケットのメタ"
"データから \"has patch\" フラグを設定してください。 \"doesn't need tests\" "
"や、その他のメタデータはレビューのためにあります。貢献する際にはいつもスク"
"ラッチからパッチを書くというわけではありません。既存のパッチをレビューするこ"
"とをまた素晴らしく役に立つ貢献です。詳細は :doc:`/internals/contributing/"
"triaging-tickets` を参照してください。"

# f6845bff35a1480fa21708ab199bffe5
#: ../../../../1.8/docs/intro/index.txt:2
msgid "Getting started"
msgstr "さぁ始めましょう。"

# 4cc38b60ea3e46b4a9c4c4d2356457fa
#: ../../../../1.8/docs/intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr ""
"Django は初めてですか? もしくは Web 開発全般で? なら、ここに来て正解ですね。"
"ここにあるドキュメントを読んで、行動に移してみましょう。"

# 79e0b4fd5ab14bbaba9d5d64228d87ad
#: ../../../../1.8/docs/intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""
"Python_ の初心者なら、まず Python がどんなものかを知ることから始めましょう。 "
"Django は 100% Python です。 ほんの最小限 Python を理解するだけで Django をよ"
"り深く理解できます。"

# dd9c18696a4f469cad8f938bc178ecc7
#: ../../../../1.8/docs/intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""
"プログラミング全般の初心者なら、 `非プログラマのための Python リソース一覧`_ "
"から始めてみるとよいでしょう。"

# fa09efdcdf074ee7b333f7bb08e71008
#: ../../../../1.8/docs/intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_. If that's not quite your "
"style, there are many other `books about Python`_."
msgstr ""

# c0cd020840894d46ac19fb387952c127
#: ../../../../1.8/docs/intro/install.txt:2
msgid "Quick install guide"
msgstr "クイックインストールガイド"

# a37788f4374248c1983df65cbcbbe7dc
#: ../../../../1.8/docs/intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a :doc:"
"`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""
"Django を使う前に、インストールをする必要があります。 Django にはできることを"
"すべてカバーした :doc:`インストールガイド </topics/install>` があります。これ"
"はシンプルでミニマルなインストールガイドで、 Django の導入部分までが説明され"
"ています。"

# 9cded463577a4718b836497d87a70ba7
#: ../../../../1.8/docs/intro/install.txt:10
msgid "Install Python"
msgstr "Python をインストールする"

# a853632cf67146f79c4cc3a6b10db9d7
#: ../../../../1.8/docs/intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. See :ref:`faq-python-"
"version-support` for details. Python includes a lightweight database called "
"SQLite_ so you won't need to set up a database just yet."
msgstr ""

# d65082ac6f184de89edfbea4afa31611
#: ../../../../1.8/docs/intro/install.txt:18
msgid ""
"Get the latest version of Python at https://www.python.org/download/ or with "
"your operating system's package manager."
msgstr ""

# 5d42885c07d34da791a32ed1530d3370
#: ../../../../1.8/docs/intro/install.txt:21
msgid "Django on Jython"
msgstr "Django on Jython"

# 30285574731b4f1881362e01a296886c
#: ../../../../1.8/docs/intro/install.txt:23
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""
"もし Jython_ (Python のJava プラットフォーム実装) を使っている場合は、いくつ"
"か追加のステップを実行する必要があります。詳細は :doc:`/howto/jython` を見て"
"ください。"

# 35b59e89e8454206b2c2d9a662277571
#: ../../../../1.8/docs/intro/install.txt:28
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""
"Python がインストールされてるかを確かめるには ``python`` とシェルでタイプしま"
"す。このように表示されるはずです::"

# d3afac44f6254ffe976bb930cf1055f8
#: ../../../../1.8/docs/intro/install.txt:37
msgid "Set up a database"
msgstr "データベースを設定する"

# 81a686b5afcf4692828903ac5051fda1
#: ../../../../1.8/docs/intro/install.txt:39
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the :ref:`database installation information <database-installation>`."
msgstr ""
"このステップはあなたが \"大きな\" データベースエンジン、 PostgreSQL 、 MySQL "
"や Oracle を使っている場合に必要です。これらのデータベースをインストールする"
"には、 :ref:`データベースのインストール方法 <database-installation>` を参照し"
"てください。"

# 73b5666d855f4bd8a576dcf374cc7a85
#: ../../../../1.8/docs/intro/install.txt:44
msgid "Remove any old versions of Django"
msgstr "古いバージョンの Django を削除する"

# 033f325120ed4e96a4a7b4b1de3aa80c
#: ../../../../1.8/docs/intro/install.txt:46
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""
"前バージョンの Django をアップグレードするには、 :ref:`新しい Django をインス"
"トールする前に、古いバージョンの Django をアンインストールする <removing-old-"
"versions-of-django>` 必要があります。"

# 32267c1294c844438722a61e33603cfa
#: ../../../../1.8/docs/intro/install.txt:51
msgid "Install Django"
msgstr "Django をインストールする"

# 58bc8d36b4d7437ea55dd6410314b8de
#: ../../../../1.8/docs/intro/install.txt:53
msgid "You've got three easy options to install Django:"
msgstr "Django をインストールするには 3 つの方法があります:"

# 4c3a8a626b1641aab555c0b0064890b4
#: ../../../../1.8/docs/intro/install.txt:55
msgid ""
"Install a version of Django :doc:`provided by your operating system "
"distribution </misc/distributions>`. This is the quickest option for those "
"who have operating systems that distribute Django."
msgstr ""
":doc:`OSディストリビューションに提供される </misc/distributions>`  Django の"
"バージョンをインストールします。 Django を配布している OS を使っている人には"
"最速の方法です。"

# c9c172a7e1114920b8486bd5c6c08fc4
#: ../../../../1.8/docs/intro/install.txt:59
msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for most users."
msgstr ""

# 3e0a68be0ebb47ee9faf56ca23b73034
#: ../../../../1.8/docs/intro/install.txt:62
msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This option is for enthusiasts who want the latest-and-greatest "
"features and aren't afraid of running brand new code. You might encounter "
"new bugs in the development version, but reporting them helps the "
"development of Django. Also, releases of third-party packages are less "
"likely to be compatible with the development version than with the latest "
"stable release."
msgstr ""

# c33b14325a594bb3b1fa9e618f19ae3e
#: ../../../../1.8/docs/intro/install.txt:70
msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""

# 7015316e2cd54e3498de94a38b0c2da9
#: ../../../../1.8/docs/intro/install.txt:73
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""
"初め 2 ステップのどちらかをした場合は、ドキュメントの **new in development "
"version** とマークされた部分に気をつけてください。このフレーズは Django の開"
"発版でのみ利用可能な機能であると意味しており、公式リリースではおそらく動作し"
"ません。"

# f35e0f59df0e4db5b81f09932c3888c5
#: ../../../../1.8/docs/intro/install.txt:80
msgid "Verifying"
msgstr "動作確認"

# 7e72f5d55817408c9d9bac867cec540e
#: ../../../../1.8/docs/intro/install.txt:82
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""
"Djnago が Python から見れるか確認をするには、シェルで ``python`` とタイプし"
"て、 Python プロンプトから Django をインポートします:"

# f576495f430143ac88a7aa98a2b02f0d
#: ../../../../1.8/docs/intro/install.txt:91
msgid "You may have another version of Django installed."
msgstr "別バージョンの Django がインストールされてるかもしれません。"

# 795919c548ee4e6ba5bdaeb17d4ce224
#: ../../../../1.8/docs/intro/install.txt:94
msgid "That's it!"
msgstr "これだけです!"

# bcc77e2b62424a17bd653199fc266acc
#: ../../../../1.8/docs/intro/install.txt:96
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr "これだけです。 `チュートリアルに進みましょう </intro/tutorial01>` 。"

# 9dbc92fa79e94fbb86836ee6561d5cbf
#: ../../../../1.8/docs/intro/overview.txt:3
msgid "Django at a glance"
msgstr "Django の概要"

# 81f032c5a852476a83e6acabce1afc36
#: ../../../../1.8/docs/intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""
"Django は変転の激しいニュースルーム環境で開発された経緯から、よくある Web 開"
"発タスクを迅速かつ簡単化するように設計されました。ここでは Django による デー"
"タベース中心の Web アプリケーション開発をざっと見てみましょう。"

# 802a45d323a74c6a8485cd705742fb5d
#: ../../../../1.8/docs/intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""
"このドキュメントの目的は、 Django の技術的な仕様について述べ、どのように動 作"
"するかを理解してもらうことにあり、チュートリアルやリファレンス用ではあり ませ"
"ん。 (とはいえ、チュートリアルもリファレンスも別に用意していますよ！) プロ"
"ジェクトを作成する準備ができたら、 :doc:`チュートリアルを始めれます </intro/"
"tutorial01>` 。もしくは :doc:`より詳細なドキュメントを読む </topics/index>` "
"こともできます。"

# 4ee14999a7c54c45ba5ad61b1b8b7c01
#: ../../../../1.8/docs/intro/overview.txt:16
msgid "Design your model"
msgstr "モデルの設計"

# 501c2ccac0d24baf9b258938dacada29
#: ../../../../1.8/docs/intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""
"データベースなしで Django を使うこともできますが、 Django には Python コード"
"でデータベースのレイアウトを記述した `オブジェクトリレーショナルマッパー`_ "
"(object-relational mapper) が付属しています。"

# c7b407db7ab6467ea1c9293ff262dedf
#: ../../../../1.8/docs/intro/overview.txt:24
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving many years' worth of "
"database-schema problems. Here's a quick example:"
msgstr ""

# 3cf7b6d075784924959e6f438bb902b7
#: ../../../../1.8/docs/intro/overview.txt:49
msgid "Install it"
msgstr "モデルのインストール"

# f3bf603ab6314f74ab13f23901a00fda
#: ../../../../1.8/docs/intro/overview.txt:51
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""
"次に、データベーステーブルを自動でつくる Django のコマンドラインユーティリ"
"ティを実行します:"

# 96ac0b54de0546c48cbd03b1f90e3456
#: ../../../../1.8/docs/intro/overview.txt:58
msgid ""
"The :djadmin:`migrate` command looks at all your available models and "
"creates tables in your database for whichever tables don't already exist, as "
"well as optionally providing :doc:`much richer schema control </topics/"
"migrations>`."
msgstr ""

# fdf6e7fcd50b4e469fbfe922fc71c9ff
#: ../../../../1.8/docs/intro/overview.txt:63
msgid "Enjoy the free API"
msgstr "自動生成される API で楽しむ"

# 2f5dcdeef49a4e54bb221cc69bb1a5ac
#: ../../../../1.8/docs/intro/overview.txt:65
msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary:"
msgstr ""
"これだけで、制約のない充実した :doc:`Python API </topics/db/queries>` を使っ "
"て自分のデータにアクセスできます。API はオンザフライで生成され、コードを作 成"
"する必要はありません:"

# e70616824e3747ba882930033d2b225e
#: ../../../../1.8/docs/intro/overview.txt:141
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""
"作業場 (scaffold) ではなく完成品 (whole house) の、動的な admin インタフェー"
"ス"

# b32a9b48130b402ea2a34b6b685dce59
#: ../../../../1.8/docs/intro/overview.txt:143
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a Web site that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site:"
msgstr ""

# f243f5884d504d4b8bf9a599572c995e
#: ../../../../1.8/docs/intro/overview.txt:168
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""
"サイトの編集はスタッフ、顧客、もしくはあなた自身の手で行われるものであり、 コ"
"ンテンツの管理だけのためにバックエンドインタフェースを作りたくはない、という"
"思想がここにはあります。"

# 0f54c4892118420789483cc40cf4b47c
#: ../../../../1.8/docs/intro/overview.txt:172
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""
"作者たちが Django アプリケーションを作成するときの典型的なワークフローは、 モ"
"デルを作成し、 admin サイトを組み上げてできるだけ早期に立ち上げ、スタッフ (や"
"顧客) がデータを投入できるようにしておいてから、データを公開するための方法を"
"開発してゆくというものです。"

# b8c58dd7ed544420871d2870235f04a4
#: ../../../../1.8/docs/intro/overview.txt:177
msgid "Design your URLs"
msgstr "URL を設計する"

# 376ea8bcc4f741679de05ef62f0f2885
#: ../../../../1.8/docs/intro/overview.txt:179
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""
"すっきりとして洗練された URL スキームは、高品質な Web アプリケーションを実 現"
"する上で重要な要素です。 Django は美しい URL の設計を助け、 ``.php`` や ``."
"asp`` のようなお粗末なゴミを URL に入れさせません。"

# 051bcd6da47c4ea4961448afd6f4ea47
#: ../../../../1.8/docs/intro/overview.txt:183
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""
"特定のアプリケーション用の URL を設計するには、 `URLconf </topics/http/"
"urls>` と呼ばれる Python モジュールを一つ作成します。 URLconf はいわばアプリ"
"ケーションの目次にあたり、 URL のパターンを Python のコールバック関数に対応づ"
"けています。 URLconf はまた、 URL と Python コードを脱カップ リングする働きも"
"持っています。"

# baa4cc6912f64fbbb4c026f3f782a130
#: ../../../../1.8/docs/intro/overview.txt:188
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr ""

# fe9285e4b3d94562abd1f14773365718
#: ../../../../1.8/docs/intro/overview.txt:204
msgid ""
"The code above maps URLs, as simple `regular expressions`_, to the location "
"of Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one "
"that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""
"上のコードはシンプルな `正規表現`_ と Python のコールバック関数(\"ビュー\")を"
"マッピングしています。正規表現は、 URL から値を取得するために括弧を用います。"
"ユーザがページを要求すると、 Django はそれぞれのパターンを順番にチェックし、"
"要求された URL に最初に一致したパターンで停止します。(もしそれらのどれとも一"
"致しなかった時、 Django は特殊ケースである404ビューを呼び出します。)正規表現"
"はロード時にコンパイルされるため、これらは非常に高速に動作します。"

# 056dd17c15bc4d24b8725c71649977d9
#: ../../../../1.8/docs/intro/overview.txt:214
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""
"一度正規表現が一致すると、 Django は Python の関数であるビュー (view) をイン"
"ポートし呼び出します。各ビューは、リクエストのメタデータを含むリクエストオブ"
"ジェクトと、正規表現でキャプチャされた値を受け取ります。"

# d5640214fa0b4b05beb03894824e0ffd
#: ../../../../1.8/docs/intro/overview.txt:218
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""
"例えば、ユーザが \"/articles/2005/05/39323/\" という URL をリクエストする"
"と、 Django は ``news.views.article_detail(request, '2005', '05', '39323')`` "
"のような関数呼び出しを行います。"

# 5a9e60fe263a479c9e39106b1ece01a6
#: ../../../../1.8/docs/intro/overview.txt:223
msgid "Write your views"
msgstr "ビューの自作"

# 1be4186c88164c1db1bc84014c618904
#: ../../../../1.8/docs/intro/overview.txt:225
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""
"各ビュー (view) には二つの役割があります: 一つはリクエストされたページのコ ン"
"テンツを含む :class:`~django.http.HttpResponse` オブジェクトを返すこと、もう"
"一つは :class:`~django.http.Http404` のような例外の送出です。それ以外の処理は"
"ユーザ次第です。"

# 95bf8daac7df4aebaa5467810b621036
#: ../../../../1.8/docs/intro/overview.txt:230
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above:"
msgstr ""

# cefdbdb1234946b592c1c8c7d1a79eb5
#: ../../../../1.8/docs/intro/overview.txt:246
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""
"この例では Django の :doc:`テンプレートシステム </topics/templates>` を使っ "
"ています。テンプレートシステムは、強力な機能をいくつも備えながらも、非プロ グ"
"ラマが使いこなせる程度に簡単な仕組みです。"

# a31edbfa94e34ed880c6dcde5bfaace6
#: ../../../../1.8/docs/intro/overview.txt:251
msgid "Design your templates"
msgstr "テンプレートを設計する"

# 5bed5c2843614070aef0e358109dd656
#: ../../../../1.8/docs/intro/overview.txt:253
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""
"上のコードでは ``news/article_detail.html`` という名前のテンプレートをロー ド"
"しています。"

# e19fc1640ac248619e213c3318dd9b48
#: ../../../../1.8/docs/intro/overview.txt:255
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""

# 8b6625e8df6e48bbaf1b3d2bb6d1a35b
#: ../../../../1.8/docs/intro/overview.txt:260
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""
"さて、 ``news/year_archive.html`` が見つかったとしましょう。テンプレートは以"
"下のように書かれています:"

# d4ae2c6b578349e0a15426269af0f081
#: ../../../../1.8/docs/intro/overview.txt:280
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# 6b713981217242b0aa2c042da3ffb20d
#: ../../../../1.8/docs/intro/overview.txt:285
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function)."
msgstr ""
"``{{ article.pub_date|date:\"F j, Y\" }}`` で、 Unix スタイルの「パイプ」 (文"
"字 “|”) を使っていることに注意して下さい。これはテンプレートフィルターと呼ば"
"れ、変数の値にフィルターをかけるためのものです。この例では、フィルタによって "
"Python の datetime オブジェクトを指定の形式にフォーマットしています (PHP の "
"date 関数に似ていますね) 。"

# 1d0941c2dd1945a5a3638ee95b8d1737
#: ../../../../1.8/docs/intro/overview.txt:290
msgid ""
"You can chain together as many filters as you'd like. You can write :ref:"
"`custom template filters <howto-writing-custom-template-filters>`. You can "
"write :doc:`custom template tags </howto/custom-template-tags>`, which run "
"custom Python code behind the scenes."
msgstr ""
"フィルターはいくつでも好きなだけ繋げることが出来ます。また、独自の Python "
"コードを実行する :ref:`カスタムテンプレートフィルタ <howto-writing-custom-"
"template-filters>` や :doc:`カスタムテンプレートタグ</howto/custom-template-"
"tags>` を書くことも出来ます。"

# 523429d7de8f41c4ad089f8a37b4771a
#: ../../../../1.8/docs/intro/overview.txt:295
msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""

# e39b45be73214aefa2ee156a1865bd48
#: ../../../../1.8/docs/intro/overview.txt:301
msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""
"ここでよくある“base.html” テンプレートで、 :doc:`静的ファイルの配信 </howto/"
"static-files/index>` を含む例をあげます:"

# ae09400d7a064300a4debd82b85bea0a
#: ../../../../1.8/docs/intro/overview.txt:318
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""
"このテンプレートはサイトのルック & フィール (とサイトのロゴ) を定義するだけ "
"にまで、極度に単純化されています。また、子テンプレートで埋めるための「穴」 を"
"提供しています。これによって、ベーステンプレート一つを変更するだけでサイ ト全"
"体のデザインを簡単に変更できます。"

# fe8e35071fad4ab489bbaba0d47b286d
#: ../../../../1.8/docs/intro/overview.txt:322
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites -- simply "
"by creating a new base template."
msgstr ""

# a35482a1d3c8476b82a1ccd8843d95f7
#: ../../../../1.8/docs/intro/overview.txt:327
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""
"他のシステムを使いたければ、必ずしも Django のテンプレートシステムを使う必 要"
"はないということに注意してください。 Django のテンプレートシステムは Django "
"のモデルレイヤと部分的にしっかり組み合わさっていますが、絶対に使わねばならな"
"いということではありません。さらに言えば、 Django のデータベース API を使う必"
"然性もありません。別のデータベース抽象化レイヤを使っても構いま せんし、 XML "
"ファイルやディスク上のファイルを読み込んでも構いません。何でもやりたいことを"
"できるのです。Django の構成要素 – モデル、ビュー、テンプレー ト – は、互いに"
"切り離して利用できるのです。"

# f0a2817073694ed0b4d8dded18638a59
#: ../../../../1.8/docs/intro/overview.txt:336
msgid "This is just the surface"
msgstr "これらはほんの一部にすぎません"

# 0a0e925a125c4fd8bb781294bdc22bd4
#: ../../../../1.8/docs/intro/overview.txt:338
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""
"以上、 Django の機能についてざっと紹介してきました。 Django は他にもまだま だ"
"便利な機能を備えています:"

# 6cd882d9533b4820b203d23b8c790916
#: ../../../../1.8/docs/intro/overview.txt:341
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""
"memcached などのバックエンドを組み込んだ  :doc:`キャッシュフレームワーク </"
"topics/cache>` 。"

# 6e6e8012d6344671a0fa2eadfeb61b76
#: ../../../../1.8/docs/intro/overview.txt:344
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""
"小さな Python クラスを書くだけで簡単に RSS や Atom フィードを生成できる :doc:"
"`配信フィードフレームワーク </ref/contrib/syndication>` 。"

# 47bd75a8624742be8a39b680d05dfeef
#: ../../../../1.8/docs/intro/overview.txt:347
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""
"自動生成される admin のセクシーな機能の数々。ここで紹介したのはほんの表層の一"
"部でしかありません。"

# 31e5ea8b77f9478a9f701e4bfac2d874
#: ../../../../1.8/docs/intro/overview.txt:350
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""
"次は、あなたが `Django をダウンロード`_ して、 :doc:`チュートリアル </intro/"
"tutorial01>` を読み、 `コミュニティ`_ に参加する番です。ご精読ありがとうござ"
"いました!"

# d8076bcad93342c0b86f9169b874b4ee
#: ../../../../1.8/docs/intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr "高度なチュートリアル: 再利用可能アプリの書き方"

# 3a890d6fcc7c4ff289a20f3c910cec5d
#: ../../../../1.8/docs/intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you "
"can reuse in new projects and share with other people."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 6 </intro/tutorial06>`のあとに続い"
"ています。 Web 投票アプリケーションを独立した Python パッケージにすることで、"
"新規のプロジェクトで再利用したり、他の人に共有したりできます。"

# ff71c802e3eb4326a73efaf4c1cdda52
#: ../../../../1.8/docs/intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""
"直近のチュートリアル 1 - 6 が終わっていないなら、一目通すことをおすすめしま"
"す。例で作ったプロジェクトが以下の説明でも使われるからです。"

# f790b354534a4ee58e3357dae4cb80ac
#: ../../../../1.8/docs/intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr "再利用性の問題"

# 5c41992f525b402ebaf48ac09f491fd9
#: ../../../../1.8/docs/intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""
"Web アプリケーションの設計、開発、テスト、そしてメンテナンスには多大な労力が"
"必要です。そして多くの Python 、 Django プロジェクト は共通の問題を抱えていま"
"す。この繰り返し作業を一部保存して保存しておければ良いと思いませんか？"

# 6668d9708ef34d438f701d8622d166fa
#: ../../../../1.8/docs/intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<https://pypi.python.org/pypi>`_ has a vast range of packages you can use in "
"your own Python programs. Check out `Django Packages <https://www."
"djangopackages.com>`_ for existing reusable apps you could incorporate in "
"your project. Django itself is also just a Python package. This means that "
"you can take existing Python packages or Django apps and compose them into "
"your own web project. You only need to write the parts that make your "
"project unique."
msgstr ""

# 65da80c858b348b182b498ea1da96095
#: ../../../../1.8/docs/intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we "
"saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy "
"to use in new projects and ready to publish for others to install and use."
msgstr ""
"投票アプリケーションが必要なプロジェクトを開始したとしましょう。ちょうど今ま"
"で作ってきたものと似たようなものです。どうやってその\n"
"アプリケーションを再利用可能にしますか？運のいいことに、その方法はすでに会得"
"済みです。 :doc:`チュートリアル3 </intro/tutorial03>` では、プロジェクトレベ"
"ルの URLconf から ``include`` を使って、投票アプリを分離する方法をみました。"
"このチュートリアルではアプリケーションを新規のプロジェクトで使いやすいように"
"し、いつでも別の場所でインストール/利用できるようにしました。"

# 6005d06bc1734dc9ad25971440daaad8
#: ../../../../1.8/docs/intro/reusable-apps.txt:35
#, fuzzy
msgid "Package? App?"
msgstr "カンファレンスアプリ"

# d8025ac462324749b6444a15212d308f
#: ../../../../1.8/docs/intro/reusable-apps.txt:37
msgid ""
"A Python `package <https://docs.python.org/tutorial/modules.html#packages>`_ "
"provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""

# 44d0f3dd1b694422b9d053a057c7b7f1
#: ../../../../1.8/docs/intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a "
"special file ``__init__.py``, even if this file is empty."
msgstr ""
"パッケージは ``import foo.bar`` または ``from foo import bar`` でインポートで"
"きます。パッケージ内のディレクトリ (例えば ``polls``) は ``__init__.py`` とい"
"う特殊なファイルを、空のファイルでもいいので含む必要があります。"

# ba2f86c88e75421a9ce4122aab4610da
#: ../../../../1.8/docs/intro/reusable-apps.txt:45
msgid ""
"A Django *application* is just a Python package that is specifically "
"intended for use in a Django project. An application may use common Django "
"conventions, such as having ``models``, ``tests``, ``urls``, and ``views`` "
"submodules."
msgstr ""

# fbb95644e1b84ed5a53ac412901ce865
#: ../../../../1.8/docs/intro/reusable-apps.txt:50
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""
"以降 *パッケージング* という言葉を、別の場所でインストールしやすいように "
"Python パッケージを作るプロセスを表すのに用います。少し混乱するかもしれません"
"ね。"

# e52e457ffbd4438bb9827593a2257891
#: ../../../../1.8/docs/intro/reusable-apps.txt:55
msgid "Your project and your reusable app"
msgstr "プロジェクトと再利用可能アプリ"

# a7cb617b60444e148854f19a75cd89fd
#: ../../../../1.8/docs/intro/reusable-apps.txt:57
msgid "After the previous tutorials, our project should look like this::"
msgstr ""
"前のチュートリアルを終えると、プロジェクトはこのようになっていたはずです::"

# 01c11276ac3a4b32a35af349f0745f07
#: ../../../../1.8/docs/intro/reusable-apps.txt:90
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for "
"the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""
"すでに ``mysite/templates`` を :doc:`チュートリアル 2 </intro/tutorial02>` "
"で、 ``polls/templates`` を :doc:`チュートリアル 3 </intro/tutorial03>` で作"
"成しました。今になるとなぜテンプレートディレクトリをプロジェクトとアプリケー"
"ションに分けたかが明確にわかりますね。投票アプリケーションに関する全ては "
"``polls`` にあります。アプリケーションが自己完結していて、新規のプロジェクト"
"にも導入しやすくなっています。"

# a30f8ec2299245ee9dac74a5af6926de
#: ../../../../1.8/docs/intro/reusable-apps.txt:97
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""
"今、 ``polls`` ディレクトリは新規の Django プロジェクトにコピーでき、すぐに再"
"利用できる状態です。しかし公開するための準備が完璧というわけではありません。"
"そのために、アプリをパッケージにして別の場所でインストールしやすいようにする"
"必要があります。"

# a7e20597bbdb40b883a39d50d1b51946
#: ../../../../1.8/docs/intro/reusable-apps.txt:104
msgid "Installing some prerequisites"
msgstr "事前に必要な物をインストールする"

# 5b6fc024838640e58ae7a7f3561e74d3
#: ../../../../1.8/docs/intro/reusable-apps.txt:106
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use setuptools_ to build our package. It's "
"the recommended packaging tool (merged with the ``distribute`` fork). We'll "
"also be using `pip`_ to install and uninstall it. You should install these "
"two packages now. If you need help, you can refer to :ref:`how to install "
"Django with pip<installing-official-release>`. You can install "
"``setuptools`` the same way."
msgstr ""

# db2e65218a2b495e9825a3406f3be264
#: ../../../../1.8/docs/intro/reusable-apps.txt:118
msgid "Packaging your app"
msgstr "アプリケーションをパッケージングする"

# 40130a495f68496f8eb407b3be1b8c7f
#: ../../../../1.8/docs/intro/reusable-apps.txt:120
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""
"Python の *パッケージング* は特定のフォーマットでアプリを作っておくことを指し"
"ます。このフォーマットは簡単にインストールして使えます。 Django 自体もこのよ"
"うにパッケージ化されています。投票アプリのような小さなものでは、このプロセス"
"はそれほど難しいものではありません。"

# d737e2cc2bff4b85b5872e7ec994b0f1
#: ../../../../1.8/docs/intro/reusable-apps.txt:124
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""
"はじめに、 ``polls`` の親ディレクトリを、 Django プロジェクトの外に作りましょ"
"う。 ``django-polls`` というディレクトリにします。"

# 9c4a40bf329f4e56b7569c0c4f3cb34b
#: ../../../../1.8/docs/intro/reusable-apps.txt:127
#, fuzzy
msgid "Choosing a name for your app"
msgstr "%(prefix)s メールアドレスを確認してください %(app_name)s"

# 09ab8462c2004a2c802f384bded829ae
#: ../../../../1.8/docs/intro/reusable-apps.txt:129
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""
"パッケージの名前を決めるときま、 PyPI のようなリソースをチェックして、すでに"
"あるパッケージとの名前の衝突を避ける必要があります。 Django アプリケーション"
"のパッケージを作って配布する際には、モジュール名の先頭に ``django-`` を付ける"
"のがよいでしょう。これによって Django アプリを探してる人が、作ったアプリが "
"Django 特化のものであると分かりやすいからです。"

# c9e7366d51df42b595da9ae485f7b76e
#: ../../../../1.8/docs/intro/reusable-apps.txt:135
msgid ""
"Application labels (that is, the final part of the dotted path to "
"application packages) *must* be unique in :setting:`INSTALLED_APPS`. Avoid "
"using the same label as any of the Django :doc:`contrib packages </ref/"
"contrib/index>`, for example ``auth``, ``admin``, or ``messages``."
msgstr ""

# 0271adf458f34ed0bd5614b0b3286c18
#: ../../../../1.8/docs/intro/reusable-apps.txt:141
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr "``polls`` ディレクトリを ``django-polls`` ディレクトリに移動する"

# 1379282e22f94a5aab2d27f1eff96d0d
#: ../../../../1.8/docs/intro/reusable-apps.txt:143
msgid "Create a file ``django-polls/README.rst`` with the following contents:"
msgstr ""

# 114abad91c324ac7b4b8009e3e212190
#: ../../../../1.8/docs/intro/reusable-apps.txt:178
msgid ""
"Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."
msgstr ""

# 3d99abe0435744a69a747af7f3bbcd9e
#: ../../../../1.8/docs/intro/reusable-apps.txt:185
msgid ""
"Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `setuptools docs <http://pythonhosted.org/"
"setuptools/setuptools.html>`_ have a good explanation. Create a file "
"``django-polls/setup.py`` with the following contents:"
msgstr ""

# 4135e56c73f84828b1686e9b97a453a8
#: ../../../../1.8/docs/intro/reusable-apps.txt:231
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"setuptools docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following contents:"
msgstr ""

# d374b796a28a48e3b960732cb5a9f5e2
#: ../../../../1.8/docs/intro/reusable-apps.txt:246
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""
"アプリケーションの詳細なドキュメントを含めるのは、任意ですが推奨されます。空"
"のディレクトリ ``django-polls/docs`` を将来のドキュメンテーションのために作っ"
"ておきましょう。 ``django-polls/MANAFEST.in`` に行を追加しておいてください::"

# 264a4fca7408483582492164a440c3ab
#: ../../../../1.8/docs/intro/reusable-apps.txt:252
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <https://readthedocs.org>`_."
msgstr ""

# fdce3ab216e448f9bae5edb3a6eeb05d
#: ../../../../1.8/docs/intro/reusable-apps.txt:256
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""
"``python setup.py sdist`` でパッケージをビルドしてみましょう (``django-"
"polls`` 内で実行してください) 。これによって ``dist`` というディレクトリと、"
"新しいパッケージである ``django-polls-0.1.tar.gz`` が作られます。"

# da77642057d14ebdadb4ccfb904b7909
#: ../../../../1.8/docs/intro/reusable-apps.txt:260
msgid ""
"For more information on packaging, see Python's `Tutorial on Packaging and "
"Distributing Projects <https://packaging.python.org/en/latest/distributing."
"html>`_."
msgstr ""

# 9b4ea7b090674422bb2cb80a849417ed
#: ../../../../1.8/docs/intro/reusable-apps.txt:264
msgid "Using your own package"
msgstr "自分のパッケージを使ってみる"

# c319e8db8a1f433493557b45aa9b80bc
#: ../../../../1.8/docs/intro/reusable-apps.txt:266
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""
"``polls`` ディレクトリはプロジェクト外に移動したので、これはもう必要ありませ"
"ん。代わりにできたての ``django-polls`` パッケージを使ってみましょう。"

# 6bb0502cd1ae45bfa33050176b7ff502
#: ../../../../1.8/docs/intro/reusable-apps.txt:269
#, fuzzy
msgid "Installing as a user library"
msgstr "ライブラリをWikiとして選択"

# 849cf6457a2a464cb2dfcd8457a7048d
#: ../../../../1.8/docs/intro/reusable-apps.txt:271
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as "
"well as preventing the package from affecting system services and other "
"users of the machine."
msgstr ""

# 2647bef2ce5948f28869787541040035
#: ../../../../1.8/docs/intro/reusable-apps.txt:277
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""
"ユーザー単位でのインストールは依然、そのユーザーのシステムツールの振る舞いに"
"影響をあたえます。なので ``virtualenv`` はより確実な解決になります (下記を参"
"照してください) 。"

# 836fcd54bb4948b0a20a96d281fa54e0
#: ../../../../1.8/docs/intro/reusable-apps.txt:281
msgid ""
"To install the package, use pip (you already :ref:`installed it <installing-"
"reusable-apps-prerequisites>`, right?)::"
msgstr ""

# 34e0be9b520e4092b37111c70ef6542a
#: ../../../../1.8/docs/intro/reusable-apps.txt:286
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""
"運が良ければ Django プロジェクトは再度、正常に動作します。確認するために再び"
"サーバーを起動します。"

# 7f8ca47db4434cc684c07d8221bf4161
#: ../../../../1.8/docs/intro/reusable-apps.txt:289
msgid "To uninstall the package, use pip::"
msgstr ""

# 4922228a1a254651906984c6f8ffcd10
#: ../../../../1.8/docs/intro/reusable-apps.txt:296
msgid "Publishing your app"
msgstr "アプリを公開する"

# c809969758e94b50986314772dd48275
#: ../../../../1.8/docs/intro/reusable-apps.txt:298
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""
"``django-polls`` のパッケージを作り、テストしました。世界に共有するときです！"
"これが単なる例でなければこうします::"

# 224df3a50d194c4cbb910c52dc78bc8c
#: ../../../../1.8/docs/intro/reusable-apps.txt:301
msgid "Email the package to a friend."
msgstr "パッケージを友人にメールで送る"

# 2bf021ba24dd4581907acc43dd662907
#: ../../../../1.8/docs/intro/reusable-apps.txt:303
msgid "Upload the package on your Web site."
msgstr "自身の Web サイトにアップロードする"

# 0b53ecc2608947178c00b535fe7a176c
#: ../../../../1.8/docs/intro/reusable-apps.txt:305
msgid ""
"Post the package on a public repository, such as `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ has `a good "
"tutorial <https://packaging.python.org/en/latest/distributing.html#uploading-"
"your-project-to-pypi>`_ for doing this."
msgstr ""

# 7b703126e82c4e188a0a5dfeb9215ca3
#: ../../../../1.8/docs/intro/reusable-apps.txt:311
msgid "Installing Python packages with virtualenv"
msgstr "virtualenv に Python パッケージをインストールする"

# 77543a5496eb49c08c8d8ffb693f4924
#: ../../../../1.8/docs/intro/reusable-apps.txt:313
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""
"これまでは投票アプリをユーザーライブラリにインストールしてきました。これには"
"いくつか欠点があります:"

# 5155078849ca4baf9a844659902e7ef3
#: ../../../../1.8/docs/intro/reusable-apps.txt:316
msgid ""
"Modifying the user libraries can affect other Python software on your system."
msgstr ""
"ユーザーライブラリの変更はシステム上の他の Python ソフトウェアに影響を与える"
"おそれがあります"

# f71502f0012143bf93592e56eab20c5f
#: ../../../../1.8/docs/intro/reusable-apps.txt:318
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""
"このパッケージの複数バージョン (もしくは同じ名前の別のもの) を実行できません"

# 0935a2d18f72414e8016fd32aee98ef8
#: ../../../../1.8/docs/intro/reusable-apps.txt:321
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""
"一般的に、複数の Django プロジェクトをメンテナンスしてる場合に生じる問題で"
"す。そうであるなら、一番良い解決策は `virtualenv <http://www.virtualenv.org/"
">`_ を使用することです。このツールを使えば複数の独立した Python 環境をメンテ"
"ナンスできます。それぞれでライブラリのコピーと、パッケージの名前空間を独自に"
"管理出来ます。"

# bd1d1b48386d46eb9db65f5f22ecc6a3
#: ../../../../1.8/docs/intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr "はじめての Django アプリ作成、その 1"

# d9cbfb47a8d34ce595d33a26fcfed965
#: ../../../../1.8/docs/intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr "さあ、例を交えながら学んでゆきましょう。"

# 31ce115ff0c04f1593e3611f02f8a323
#: ../../../../1.8/docs/intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""
"このチュートリアルでは、簡単な投票 (poll) アプリケーションの作成に取り組ん で"
"もらいます。"

# b588683a161b46d19705c26fb164a6d2
#: ../../../../1.8/docs/intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr "Poll アプリケーションは 2 つの部分からなります:"

# 440f2668596e4141afc79abad34a5e7c
#: ../../../../1.8/docs/intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr "ユーザが投票したり結果を表示したりできる公開用サイト"

# b5f44dc087e54af8a7ccefd1b2e19f02
#: ../../../../1.8/docs/intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr "投票項目の追加、変更、削除を行うための管理 (admin) サイト"

# 097bed24146942fd8ce716ef5fdccf35
#: ../../../../1.8/docs/intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""
":doc:`Django は既にインストール済み </intro/install>` として、説明を進めま"
"す。 Django がインストールされている、どのバージョンか調べるには、以下のコマ"
"ンドを実行します:"

# 480fb780b63241d29e81de1cb8f9f278
#: ../../../../1.8/docs/intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""
"Django がインストールされていれば、インストールされている Django のバージョン"
"がわかります。もしなければ \"No module named django\" とエラーが表示されま"
"す。"

# bbcb7feb1a3f434cbc6dc11e0db6e3b8
#: ../../../../1.8/docs/intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 3.2 or later. If "
"the Django version doesn't match, you can refer to the tutorial for your "
"version of Django by using the version switcher at the bottom right corner "
"of this page, or update Django to the newest version. If you are still using "
"Python 2.7, you will need to adjust the code samples slightly, as described "
"in comments."
msgstr ""

# 7cad03bfdf494dedb2d9c07f8027b94f
#: ../../../../1.8/docs/intro/tutorial01.txt:32
msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""
":doc:`Django のインストール方法 </topics/install>` を見て、 Django の旧バー"
"ジョンを削除してより新しいものをインストールしてください。"

# 3d8cc747c9b04d4cac24bb148e02a51b
#: ../../../../1.8/docs/intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to |django-users| or drop by `#django on irc.freenode.net <irc://irc."
"freenode.net/django>`_ to chat with other Django users who might be able to "
"help."
msgstr ""

# 1dff61547a24452790bc65829107d968
#: ../../../../1.8/docs/intro/tutorial01.txt:43
msgid "Creating a project"
msgstr "プロジェクトを作成する"

# 06d87a85a90743518b176138fe5f370f
#: ../../../../1.8/docs/intro/tutorial01.txt:45
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"初めて Django を使うのなら、最初のセットアップを行う必要があります。通常は、 "
"Django の :term:`プロジェクト` (:term:`project`) を構成するコードを自動生成し"
"ます。プロジェクトとは、データベースの設定や Django 固有のオプション、アプリ"
"ケーション固有の設定などといった、個々の Django インスタンスの設定を集めたも"
"のです。"

# 5a450e9b55f84050a8acdc83fe0bb959
#: ../../../../1.8/docs/intro/tutorial01.txt:51
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""
"コマンドラインから、コードを置きたい場所に ``cd`` して、以下のコマンドを 実行"
"してください。"

# e174c71011784135b131c3d1bb5df04a
#: ../../../../1.8/docs/intro/tutorial01.txt:58
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin`."
msgstr ""

# d58dbf56c4544d83afd2187ea2ec1bca
#: ../../../../1.8/docs/intro/tutorial01.txt:63
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""
"プロジェクトの名前を付けるとき、組み込みの Python モジュールや Django のコン"
"ポーネントの名前を使わないようにしてください。とりわけ、 ``django`` (Django "
"自体と名前が衝突します) や ``test`` (組み込みの Python パッケージ名と名前が衝"
"突します) を使わないようにしましょう。"

# b740bab61b8d40d392952083ccad2b6c
#: ../../../../1.8/docs/intro/tutorial01.txt:68
msgid "Where should this code live?"
msgstr "コードはどこに置くの？"

# 2e8876951b5b4127a4b751ae5c717289
#: ../../../../1.8/docs/intro/tutorial01.txt:70
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document "
"root, because it risks the possibility that people may be able to view your "
"code over the Web. That's not good for security."
msgstr ""
"(モダンなフレームワークを使わない) 古いプレーンな PHP の経験があるなら、これ"
"までは Web サーバのドキュメントルート下 (``/var/www`` といった場所) にコード"
"を配置してきたことでしょう。 Django ではそうしないでください｡ Python コード"
"を Web サーバーのドキュメントルート下に置かないでください｡コードをドキュメン"
"トルート下に置くと、 誰かがコードを Web を介して読めるようになってしまうから"
"です。これは安全上良くありません。"

# 8ad1553839a540fab153c7018e33a521
#: ../../../../1.8/docs/intro/tutorial01.txt:77
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""
"コードはドキュメントルートの外､例えば ``/home/mycode`` の ような場所に置きま"
"しょう。"

# 3e52c15f88ae45049f8def3300b66e98
#: ../../../../1.8/docs/intro/tutorial01.txt:80
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ":djadmin:`startproject` が何を作成したかをみてみましょう::"

# 864e8eef262d465f9833e7eab077a2a7
#: ../../../../1.8/docs/intro/tutorial01.txt:90
msgid "These files are:"
msgstr "ファイルはそれぞれ以下のような役割を持っています::"

# 9c1cbc0f30c046cb967fb8a8bf4f6756
#: ../../../../1.8/docs/intro/tutorial01.txt:92
msgid ""
"The outer :file:`mysite/` root directory is just a container for your "
"project. Its name doesn't matter to Django; you can rename it to anything "
"you like."
msgstr ""
"外側の  :file:`mysite/` ルートディレクトリは、このプロジェクトのただの入れ物"
"です。 この名前は Django に関係しませんので、好きな名前に変更できます。"

# 8b84f7bf733c4b22aadd7e6ecfd0d524
#: ../../../../1.8/docs/intro/tutorial01.txt:96
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""
":file:`manage.py`: Django プロジェクトに対する様々な操作を行うためのコマンド"
"ラインユーティリティです｡詳しくは :doc:`/ref/django-admin` 内の :file:"
"`manage.py` を参照してください｡"

# dc5df6974a3a485bb4c72326931498bf
#: ../../../../1.8/docs/intro/tutorial01.txt:100
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""
"内側の :file:`mysite/` ディレクトリは、このプロジェクトの本当の Python パッ"
"ケージです。この名前が Python パッケージの名前であり、 import の際に 使用する"
"名前です (例えば import ``mysite.urls``) 。"

# 91b82891165a4798b66d5871f056ede3
#: ../../../../1.8/docs/intro/tutorial01.txt:104
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""
":file:`mysite/__init__.py`: このディレクトリが Python パッケージであることを "
"Python に知らせるための空のファイルです。(Python の初心者は、 Python の公式 "
"ドキュメントの `パッケージの詳しい説明`_ を読んで下さい。)"

# 722aa5ffe2aa47f097c31a73457fbd0e
#: ../../../../1.8/docs/intro/tutorial01.txt:108
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""
":file:`mysite/settings.py`: Django プロジェクトの設定ファイルです。 設定の仕"
"組みは :doc:`/topics/settings` を参照してください。"

# b82acb7d36eb4cc2ae17db354e28d011
#: ../../../../1.8/docs/intro/tutorial01.txt:112
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""
":file:`mysite/urls.py`: Django プロジェクトの URL 宣言、いうなれば Django サ"
"イトにおける「目次」に相当します。詳しくは :doc:`/topics/http/urls` を参照 し"
"てください。"

# 47ea9ae39ea1489483037a62c08b91a3
#: ../../../../1.8/docs/intro/tutorial01.txt:116
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""
":file:`mysite/wsgi.py`: プロジェクトをサーブするためのWSGI互換Webサーバーとの"
"エントリーポイントです。詳細は :doc:`/howto/deployment/wsgi/index` を参照して"
"ください。"

# 2896585524d84e3ca4273a264ca87ce8
#: ../../../../1.8/docs/intro/tutorial01.txt:122
msgid "Database setup"
msgstr "Database の設定"

# 86e9e66616fb4c9e810f8d5f0c609af3
#: ../../../../1.8/docs/intro/tutorial01.txt:124
msgid ""
"Now, open up :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""

# d4db996081b345a7ac3f6b4b08ce0663
#: ../../../../1.8/docs/intro/tutorial01.txt:127
msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support "
"your database. When starting your first real project, however, you may want "
"to use a more robust database like PostgreSQL, to avoid database-switching "
"headaches down the road."
msgstr ""

# 50cf2035bfd94d74aca14ab82e4deb37
#: ../../../../1.8/docs/intro/tutorial01.txt:134
msgid ""
"If you wish to use another database, install the appropriate :ref:`database "
"bindings <database-installation>`, and change the following keys in the :"
"setting:`DATABASES` ``'default'`` item to match your database connection "
"settings:"
msgstr ""

# a290053e01c14662a5d97a4adb9379f2
#: ../../../../1.8/docs/intro/tutorial01.txt:139
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"sqlite3'``, ``'django.db.backends.postgresql_psycopg2'``, ``'django.db."
"backends.mysql'``, or ``'django.db.backends.oracle'``. Other backends are :"
"ref:`also available <third-party-notes>`."
msgstr ""

# c5083583e3504a7da64112152c712f0a
#: ../../../../1.8/docs/intro/tutorial01.txt:146
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file "
"in your project directory."
msgstr ""

# 6c317839db93460fb0abdef737480595
#: ../../../../1.8/docs/intro/tutorial01.txt:152
msgid ""
"If you are not using SQLite as your database, additional settings such as :"
"setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. For more "
"details, see the reference documentation for :setting:`DATABASES`."
msgstr ""

# a2db1aeffc0f498fba695b0d0564ed98
#: ../../../../1.8/docs/intro/tutorial01.txt:157
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""
"もし PostgreSQL や MySQL を使っている場合、 database を今のうちに作っておいて"
"ください。 \"``CREATE DATABASE database_name;``\" とデータベースのインタラク"
"ティブプロンプトで実行してください。"

# f57d202016cc4d38812c9d25f8b641b4
#: ../../../../1.8/docs/intro/tutorial01.txt:161
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""
"SQLite を使っている場合は、前もってすることはありません。必要であればデータ"
"ベースファイルが自動で生成されます。"

# f18f3bf7ebd54d6ea98555080ffbab58
#: ../../../../1.8/docs/intro/tutorial01.txt:164
msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to "
"your time zone."
msgstr ""

# dcf9ec9cbf6f46f4a4d83927f3061e6e
#: ../../../../1.8/docs/intro/tutorial01.txt:167
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""

# 377b390da3b144969c0891ce1bf642ca
#: ../../../../1.8/docs/intro/tutorial01.txt:172
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""
"デフォルトでは、 :settings:`INSTALLED_APPS` には以下のアプリケーションがは"
"いっています。"

# c9640b40bd3b4232849fb05fc4e289eb
#: ../../../../1.8/docs/intro/tutorial01.txt:175
msgid ""
":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:`part 2 "
"of this tutorial </intro/tutorial02>`."
msgstr ""

# 8b9698886299481dba5da7d582382486
#: ../../../../1.8/docs/intro/tutorial01.txt:178
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ":mod:`django.contrib.auth` - 認証システム"

# 4287fd7ade7a480fa823dfeb1a8323a7
#: ../../../../1.8/docs/intro/tutorial01.txt:180
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ":mod:`django.contrib.contenttypes` - コンテンツタイプフレームワーク"

# 43d1478c7918438185deee88ff38cc0f
#: ../../../../1.8/docs/intro/tutorial01.txt:182
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ":mod:`django.contrib.sessions` - セッションフレームワーク"

# 461e0adb8e214ba7a6e99238c38841a2
#: ../../../../1.8/docs/intro/tutorial01.txt:184
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ":mod:`django.contrib.messages` - メッセージフレームワーク"

# 403294afd2134877ab491ffe27bbbe5a
#: ../../../../1.8/docs/intro/tutorial01.txt:186
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ":mod:`django.contrib.staticfiles` - 静的ファイルの管理フレームワーク"

# 6d22a2f1392f406eab094141f39b433d
#: ../../../../1.8/docs/intro/tutorial01.txt:189
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr "これらの機能はよく使われるのでデフォルトで付属しています。"

# 641452d39eae4cf9b22d3a519a8027dc
#: ../../../../1.8/docs/intro/tutorial01.txt:191
msgid ""
"Some of these applications make use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# 7cd68b1b4d6d4067a7415a586fef09c5
#: ../../../../1.8/docs/intro/tutorial01.txt:199
msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations "
"shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client "
"for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), "
"or ``.schema`` (SQLite) to display the tables Django created."
msgstr ""

# 8cb8a0e25cd1457ab3874d83efe1d6a2
#: ../../../../1.8/docs/intro/tutorial01.txt:207
msgid "For the minimalists"
msgstr "ミニマリストのために"

# fd6c4b3c890649c3aee58877978614ac
#: ../../../../1.8/docs/intro/tutorial01.txt:209
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`migrate`. The :djadmin:`migrate` "
"command will only run migrations for apps in :setting:`INSTALLED_APPS`."
msgstr ""

# 30df9efcd581401cbad6da36f6068225
#: ../../../../1.8/docs/intro/tutorial01.txt:217
msgid "The development server"
msgstr "開発用サーバー"

# 001985c71152462a9d29ae07d85c463d
#: ../../../../1.8/docs/intro/tutorial01.txt:219
msgid ""
"Let's verify your Django project works. Change into the outer :file:`mysite` "
"directory, if you haven't already, and run the following commands:"
msgstr ""

# 76001ab5dc524b05b1d7ec1067c098b1
#: ../../../../1.8/docs/intro/tutorial01.txt:226
msgid "You'll see the following output on the command line:"
msgstr ""

# 7b90db656bd7427f93bf811ded8ed026
#: ../../../../1.8/docs/intro/tutorial01.txt:238
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""
"これで、 Django 開発サーバを起動しました。 Django 開発サーバは Python だけで"
"書かれた軽量な Web サーバです。このサーバは、開発を迅速に行い、運用に適した状"
"態になるまで Apache のような運用サーバの設定をいじらなくても良いようにするた"
"めのものです。"

# 69dee7b695a54feb85a50ff3c36daac6
#: ../../../../1.8/docs/intro/tutorial01.txt:243
msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 59bc69c0a8094a42ac9cc1b524f769eb
#: ../../../../1.8/docs/intro/tutorial01.txt:247
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""
"さあ、これでサーバが起動したので、ブラウザで http://127.0.0.1:8000/ にアクセ"
"スしてみてください。 “Welcome to Django” と表示された、明るいパステル調のライ"
"トブルーのページが出るはずです。やりましたね！"

# c1327c325c444a468c60d03ba7c05c96
#: ../../../../1.8/docs/intro/tutorial01.txt:251
msgid "Changing the port"
msgstr "ポート番号の変更"

# 0b66c3dd509647b1a97afb0ad868520b
#: ../../../../1.8/docs/intro/tutorial01.txt:253
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""
"デフォルトでは :djadmin:`runserver` コマンドは内部 IP のポート 8000 で起動し"
"ます。"

# a06617b101db402f9e1d1d2db967dc69
#: ../../../../1.8/docs/intro/tutorial01.txt:256
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""
"サーバーのポートを変えたい場合は、以下のようにコマンドライン引数を渡してくだ"
"さい。このコマンドによってポート 8080 で起動させれます:"

# 1e2cc6f5de0547fc9e01ad6221cdd93c
#: ../../../../1.8/docs/intro/tutorial01.txt:264
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers on your network), use:"
msgstr ""

# 8170fa61dde444a6a48b1cecfab4300a
#: ../../../../1.8/docs/intro/tutorial01.txt:272
msgid ""
"Full docs for the development server can be found in the :djadmin:"
"`runserver` reference."
msgstr ""
"開発サーバーの詳細な説明は :djadmin:`runserver` のリファレンスを参照して下さ"
"い。"

# 3972ea08e1c54a92b3350dbfa9770c67
#: ../../../../1.8/docs/intro/tutorial01.txt:275
msgid "Automatic reloading of :djadmin:`runserver`"
msgstr ""

# 77abb0e4c64d4b6f804fb75f86c25415
#: ../../../../1.8/docs/intro/tutorial01.txt:277
msgid ""
"The development server automatically reloads Python code for each request as "
"needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""

# 695f628a89b846b9ac541743a60dafe2
#: ../../../../1.8/docs/intro/tutorial01.txt:285
msgid "Creating models"
msgstr "モデルの作成"

# edc2e39be25e49c3acc438c2354f67b7
#: ../../../../1.8/docs/intro/tutorial01.txt:287
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""
"さあ、これで自分用の環境、すなわちプロジェクトが立ち上がり、作業にとりかかる"
"準備ができました。"

# bcb58494b74b4b119a9acefcea916033
#: ../../../../1.8/docs/intro/tutorial01.txt:290
msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically "
"generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""
"Django 内に追加する各アプリケーションは以下の規則に従った Python パッケージで"
"構成されます。 Django には基本的なディレクトリ構造を自動生成するユーティリ"
"ティが含まれているので、ディレクトリを作ることでなくコードを書くことに集中で"
"きます。"

# 304aeac351fa4ad3885fa2162d641e27
#: ../../../../1.8/docs/intro/tutorial01.txt:295
msgid "Projects vs. apps"
msgstr "プロジェクトとアプリケーション"

# e734ee40370e47fc8282e253a36cc0d6
#: ../../../../1.8/docs/intro/tutorial01.txt:297
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""
"プロジェクトとアプリケーションの違いとは何でしょうか？アプリケーションとは、"
"実際に何らかの処理を行う Web アプリケーションを指します。例えばブログシステム"
"や公開レコードのデータベース、単純な投票アプリといった具合です。プロジェクト"
"とは、あるウェブサイト向けに設定とアプリケーションを集めたものです。一つのプ"
"ロジェクトには複数のアプリケーションを入れられ ます。また、一つのアプリケー"
"ションは複数のプロジェクトで使えます。"

# 495142e408a84e37afddf75d8559be32
#: ../../../../1.8/docs/intro/tutorial01.txt:303
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""
"アプリケーションは `Python パス`_ のどこにでも置けます。このチュートリアルで"
"は投票アプリケーションを :file:`manage.py` のすぐ隣に作ります。なので、 "
"``mysite`` のサブモジュールとしてでなく、トップレベルのモジュールとしてイン"
"ポートできます。"

# 8b51cf12119d4c5ab69a546e320f0c5a
#: ../../../../1.8/docs/intro/tutorial01.txt:307
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""
"アプリケーションを作るには、 :file:`manage.py` と同じディレクトリに入って、こ"
"のコマンドを実行します:"

# 3375837e33d34cba972cb7ad67bc1459
#: ../../../../1.8/docs/intro/tutorial01.txt:314
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""
"このコマンドは :file:`polls` というディレクトリを作成します。中身はこのように"
"なっています::"

# a43b3cd7521f4e4e9ff279abb0aded03
#: ../../../../1.8/docs/intro/tutorial01.txt:325
msgid "This directory structure will house the poll application."
msgstr "このディレクトリ構造が、 poll アプリケーションの全体像です。"

# f8b2a1e024ec40638a2d77d7b88c38ce
#: ../../../../1.8/docs/intro/tutorial01.txt:327
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""
"Django でデータベース Web アプリケーションを書くための最初のステップは、モ デ"
"ルの定義です。本質的にはデータベースのレイアウトと、追加のメタデータの定義で"
"す。"

# 97cdb512a3f8447f9008a36422ba3f6e
# 9ae2d6c963c14517b3aa05e4eeed6629
# e81973b0f2f94dea98c8db7b93b5e093
# 6462c137bee749f8bf125900823b7f1c
# 6147a2f04c4b4e928f30d34a6428c4b1
#: ../../../../1.8/docs/intro/tutorial01.txt:330
#: ../../../../1.8/docs/intro/tutorial01.txt:414
#: ../../../../1.8/docs/intro/tutorial02.txt:9
#: ../../../../1.8/docs/intro/tutorial03.txt:10
#: ../../../../1.8/docs/intro/tutorial03.txt:486
msgid "Philosophy"
msgstr "設計哲学"

# f8cb8342247145b9ba65630b798f0035
#: ../../../../1.8/docs/intro/tutorial01.txt:332
msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# 4fab05a85a9d472297e1bd09886ae207
#: ../../../../1.8/docs/intro/tutorial01.txt:337
msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially "
"just a history that Django can roll through to update your database schema "
"to match your current models."
msgstr ""

# a7c31a8050f14e87bb4ba0b7bab9ba9c
#: ../../../../1.8/docs/intro/tutorial01.txt:342
msgid ""
"In our simple poll app, we'll create two models: ``Question`` and "
"``Choice``. A ``Question`` has a question and a publication date. A "
"``Choice`` has two fields: the text of the choice and a vote tally. Each "
"``Choice`` is associated with a ``Question``."
msgstr ""

# effabec266f3413abc2cc96d50bbb2f2
#: ../../../../1.8/docs/intro/tutorial01.txt:347
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this:"
msgstr ""

# e3a84baac33747dab446d5956f5ae78b
#: ../../../../1.8/docs/intro/tutorial01.txt:366
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""
"コードは単純明解ですね。各モデルは一つのクラスで表現され、いずれも :class:"
"`django.db.models.Model` のサブクラスです。各モデルには複数のクラス変数があ"
"り、個々のクラス変数はモデルのデータベースフィールドを表現しています。"

# f70bab74637641c690a8fea4810338e4
#: ../../../../1.8/docs/intro/tutorial01.txt:370
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""
"各フィールドは :class:`~django.db.models.Field` クラスのインスタンスとして表"
"現されています。例えば、 :class:`~django.db.models.CharField` は文字のフィー"
"ルドで、 :class:`~django.db.models.DateTimeField` は日時フィー ルドです。こう"
"したクラスは、各フィールドにどのようなデータ型を記憶させるか を Django に教え"
"ます。"

# b4cc5f709ddc48e695f04528392001d2
#: ../../../../1.8/docs/intro/tutorial01.txt:375
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# cbcd2344d7f94c779a3655e161b0131c
#: ../../../../1.8/docs/intro/tutorial01.txt:379
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Question.pub_date``. "
"For all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""

# b695122b552943ad97c4473e7fe8ca70
#: ../../../../1.8/docs/intro/tutorial01.txt:387
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""
":class:`~django.db.models.Field` クラスの中には必須の引数を持つものがありま "
"す。例えば `~django.db.models.CharField` には :attr:`~django.db.models."
"CharField.max_length` を指定する必要があります。この引数はデータベーススキー"
"マで使われる他、後で述べるバリデーションでも使われま す。"

# 9bf17746484c4961a04c2769cb02bc62
#: ../../../../1.8/docs/intro/tutorial01.txt:392
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""
":class:`~django.db.models.Field` はいつくかオプションの引数も取れます。今回の"
"場合、 ```votes`` の :attr:`~django.db.models.Field.default` 値を 0 に設定し"
"ました。"

# 11ca480829be42a2a77bed931524636e
#: ../../../../1.8/docs/intro/tutorial01.txt:396
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Question``. Django supports all the common database relationships: many-to-"
"one, many-to-many and one-to-one."
msgstr ""

# 7ff6a74fb77b477ea2c015802541c9c1
#: ../../../../1.8/docs/intro/tutorial01.txt:404
msgid "Activating models"
msgstr "モデルを有効にする"

# 0c161de9884f43cfb672e5ca1af05fd6
#: ../../../../1.8/docs/intro/tutorial01.txt:406
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""
"前述のようなほんのわずかなコードをモデルに書くだけで、 Django はたくさんの情"
"報を知れます。このコードを使って、 Django は:"

# 51b0e5aadb674da59a36b7433ca29e61
#: ../../../../1.8/docs/intro/tutorial01.txt:409
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""
"アプリケーションのデータベーススキーマを作成 (``CREATE TABLE`` 文を実行) でき"
"ます。"

# f8b7329e0d5146e98cc20321145fa4ed
#: ../../../../1.8/docs/intro/tutorial01.txt:410
msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""

# 63897a0f1d474f63ba5b258942cdd636
#: ../../../../1.8/docs/intro/tutorial01.txt:412
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""
"でもその前に ``polls`` アプリケーションをインストールしたことをプロジェクトに"
"教えてやる必要があります。"

# 78762d0f7c5b4864a27505c3b92ff4c6
#: ../../../../1.8/docs/intro/tutorial01.txt:416
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""
"Django アプリケーションは「プラガブル (pluggable)」です。アプリケーショ ンは"
"特定の Django インストールに結び付いていないので、アプリケーションを複数のプ"
"ロジェクトで使ったり、単体で配布したりできます。"

# efcf765dc9e14d009e833fd3027b8bba
#: ../../../../1.8/docs/intro/tutorial01.txt:420
msgid ""
"Edit the :file:`mysite/settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this:"
msgstr ""

# ca4c4c56655944ea9d39cfa8962c6e42
#: ../../../../1.8/docs/intro/tutorial01.txt:437
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""
"これで Django は ``polls`` アプリケーションが含まれていると知りました。もうひ"
"とつコマンドを実行しましょう:"

# 18cba5f01cec4aa89a9869ab52937632
#: ../../../../1.8/docs/intro/tutorial01.txt:443
msgid "You should see something similar to the following:"
msgstr ""

# 0176acfb2e1644e9970ba0695ab91435
#: ../../../../1.8/docs/intro/tutorial01.txt:453
msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""

# 8f898386a1724dcd9c255a414fde7e98
#: ../../../../1.8/docs/intro/tutorial01.txt:457
msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're just files on disk. You can read the migration "
"for your new model if you like; it's the file ``polls/"
"migrations/0001_initial.py``. Don't worry, you're not expected to read them "
"every time Django makes one, but they're designed to be human-editable in "
"case you want to manually tweak how Django changes things."
msgstr ""

# d9d56d75072e4599bb55c9ce539c8d29
#: ../../../../1.8/docs/intro/tutorial01.txt:464
msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""

# f8c68fa34e994c20b559a8cc3cdfc076
#: ../../../../1.8/docs/intro/tutorial01.txt:473
msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""

# 63123a846125481a8c798b3f55d55c33
#: ../../../../1.8/docs/intro/tutorial01.txt:500
msgid "Note the following:"
msgstr "以下に注意してください:"

# 492f2b0b73db45798c00cda551f7a6f9
#: ../../../../1.8/docs/intro/tutorial01.txt:502
msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""

# e5f9b4c818e24f04a5118f565fe3cf29
#: ../../../../1.8/docs/intro/tutorial01.txt:505
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""

# b1196f21eef549469e8b7084c9ef116f
#: ../../../../1.8/docs/intro/tutorial01.txt:509
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""
"主キー (primary key, ID) は自動的に追加されます (この挙動もオーバライド可能で"
"す)。"

# cd9ea9f6918146989384234855d9e96c
#: ../../../../1.8/docs/intro/tutorial01.txt:511
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""
"便宜上、 Django は外部キーのフィールド名に ``\"_id\"`` を追加します。もちろん"
"この挙動もオーバライド可能です。"

# e0b790cdb9944f6ba6be6473c90f6d52
#: ../../../../1.8/docs/intro/tutorial01.txt:514
msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""

# da97eb7deafb4f8da113b470958c611f
#: ../../../../1.8/docs/intro/tutorial01.txt:518
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key autoincrement`` (SQLite) are handled for you automatically. Same "
"goes for the quoting of field names -- e.g., using double quotes or single "
"quotes."
msgstr ""

# ec5ba7624aca4feb9d4a74dbc6b12a6f
#: ../../../../1.8/docs/intro/tutorial01.txt:524
msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your "
"database - it just prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""

# 7afa54e33fee4ad1bc9de5b4e221ced9
#: ../../../../1.8/docs/intro/tutorial01.txt:530
msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""

# 4e3f7779c71341f79cb640e8d204e27c
#: ../../../../1.8/docs/intro/tutorial01.txt:534
msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""

# 45f490687565412cad21ecfcff6cd722
#: ../../../../1.8/docs/intro/tutorial01.txt:550
msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database - "
"essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""

# 5a52487f975a48b6aba2234dccaf9cef
#: ../../../../1.8/docs/intro/tutorial01.txt:556
msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables "
"and make new ones - it specializes in upgrading your database live, without "
"losing data. We'll cover them in more depth in a later part of the tutorial, "
"but for now, remember the three-step guide to making model changes:"
msgstr ""

# b22c4916013645968b033156452e5463
#: ../../../../1.8/docs/intro/tutorial01.txt:562
msgid "Change your models (in ``models.py``)."
msgstr ""

# 79f26630e67b49ea88aba6881caaccf8
#: ../../../../1.8/docs/intro/tutorial01.txt:563
msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""

# 1044915b52404a4e86b1d3f49a8603cc
#: ../../../../1.8/docs/intro/tutorial01.txt:565
msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""

# de24b53da48740cdaaf4a12923b3dbfa
#: ../../../../1.8/docs/intro/tutorial01.txt:568
msgid ""
"The reason that there are separate commands to make and apply migrations is "
"because you'll commit migrations to your version control system and ship "
"them with your app; they not only make your development easier, they're also "
"useable by other developers and in production."
msgstr ""

# 772a66dc705b4ceaa062de785b1590a2
#: ../../../../1.8/docs/intro/tutorial01.txt:573
msgid ""
"Read the :doc:`django-admin documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# a5a1eafe214a4de097953b2f32e3c2d5
#: ../../../../1.8/docs/intro/tutorial01.txt:577
msgid "Playing with the API"
msgstr "API で遊んでみる"

# 16c6b785f74d414983f2045056941a1f
#: ../../../../1.8/docs/intro/tutorial01.txt:579
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""
"さぁ、 Python 対話シェルを起動して、 Django が提供する API で遊んでみましょ"
"う。 Python シェルを起動するには、以下のコマンドを実行します:"

# c6d41c4102354736a160215ae5f2f1cd
#: ../../../../1.8/docs/intro/tutorial01.txt:586
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""
"単に “python” を実行しないのは、 Django に :file:`mysite/settings.py` ファイ"
"ルへの import パスを与える ``DJANGO_SETTINGS_MODULE`` の環境変数を :file:"
"`manage.py` で設定しているからです。"

# 689f199606e9467b99963f3b4a564ea8
#: ../../../../1.8/docs/intro/tutorial01.txt:590
msgid "Bypassing manage.py"
msgstr "manage.py を使わずに済ませる方法"

# 90402be993674f0abfa0d3985bf72fcc
#: ../../../../1.8/docs/intro/tutorial01.txt:592
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable to ``mysite.settings``, start "
"a plain Python shell, and set up Django:"
msgstr ""

# cc20ef7754244348a1d875a3e6635726
#: ../../../../1.8/docs/intro/tutorial01.txt:601
msgid ""
"If this raises an :exc:`AttributeError`, you're probably using a version of "
"Django that doesn't match this tutorial version. You'll want to either "
"switch to the older tutorial or the newer Django version."
msgstr ""

# b24f6072caab41d79bb06b40f218c077
#: ../../../../1.8/docs/intro/tutorial01.txt:605
msgid ""
"You must run ``python`` from the same directory :file:`manage.py` is in, or "
"ensure that directory is on the Python path, so that ``import mysite`` works."
msgstr ""

# d138aaef3b7d4d6b98b5346d200ab115
#: ../../../../1.8/docs/intro/tutorial01.txt:609
msgid ""
"For more information on all of this, see the :doc:`django-admin "
"documentation </ref/django-admin>`."
msgstr ""

# 7a6cfa9fa02b4d538a57d82f4e1845be
#: ../../../../1.8/docs/intro/tutorial01.txt:612
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""
"シェルに入ったら :doc:`データベース API </topics/db/queries>` の世界を探検し"
"てみましょう::"

# 6de565bdffa9450f858759cae6e6baa5
#: ../../../../1.8/docs/intro/tutorial01.txt:652
msgid ""
"Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a :meth:`~django.db."
"models.Model.__str__` method to both ``Question`` and ``Choice``:"
msgstr ""

# 5e3fc783f84f4cb19ba6c24f266945bc
#: ../../../../1.8/docs/intro/tutorial01.txt:673
msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""

# d277598580114a088f2cfde2632408a1
#: ../../../../1.8/docs/intro/tutorial01.txt:678
#, fuzzy
msgid "``__str__`` or ``__unicode__``?"
msgstr "Unicode 変換がありません。\n"

# c55b083ebb19490b954a6eabe8656e36
#: ../../../../1.8/docs/intro/tutorial01.txt:680
msgid ""
"On Python 3, it's easy, just use :meth:`~django.db.models.Model.__str__`."
msgstr ""

# 87c6e3969ddb40b199e39d2a9fbf8e8f
#: ../../../../1.8/docs/intro/tutorial01.txt:683
msgid ""
"On Python 2, you should define :meth:`~django.db.models.Model.__unicode__` "
"methods returning ``unicode`` values instead. Django models have a default :"
"meth:`~django.db.models.Model.__str__` method that calls :meth:`~django.db."
"models.Model.__unicode__` and converts the result to a UTF-8 bytestring. "
"This means that ``unicode(p)`` will return a Unicode string, and ``str(p)`` "
"will return a bytestring, with characters encoded as UTF-8. Python does the "
"opposite: ``object`` has a ``__unicode__`` method that calls ``__str__`` and "
"interprets the result as an ASCII bytestring. This difference can create "
"confusion."
msgstr ""

# fbf565d1ff0948ec8f0c0f65d80ba8d4
#: ../../../../1.8/docs/intro/tutorial01.txt:693
msgid "If all of this is gibberish to you, just use Python 3."
msgstr ""

# de0e535dc39b4ac786e11e39677afc50
#: ../../../../1.8/docs/intro/tutorial01.txt:695
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration:"
msgstr ""

# bec128392816492a9f5a7624d5658bf2
#: ../../../../1.8/docs/intro/tutorial01.txt:712
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""
"``import datetime`` と ``from django.utils import timezone`` で Python の 標"
"準モジュール :mod:`datetime` と Django のタイムゾーン関連ユーティリティの :"
"mod:`django.utils.timezone` を参照していることに注意してください。 Python で"
"のタイムゾーンの取り扱いに不慣れな場合は、 `タイムゾーンサポートドキュメント "
"</topics/i18n/timezones>` を参照してください。"

# a4ef33a3c6134771bc2b4295b5bd2f60
#: ../../../../1.8/docs/intro/tutorial01.txt:718
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""
"変更を保存して、もう一度 ``python manage.py shell`` を実行して新しい Python "
"対話シェルを始めましょう::"

# a08678c6f9a34fa8b5ce9ba5f0fa44aa
#: ../../../../1.8/docs/intro/tutorial01.txt:797
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""
"モデルのリレーションについては :doc:`リレーション先オブジェクトにアクセスす"
"る </ref/models/relations>` を参照してください。 API を通じた、フィールドルッ"
"クアップのためのダブルアンダースコアの使い方は :ref:`フィールドルックアップ "
"<field-lookups-intro>` を参照してください。データーベース API の詳細は :doc:`"
"データベース API リファレンス </topics/db/queries>` を参照してください。"

# dde0c2bb87a54231bdda8edc75476188
#: ../../../../1.8/docs/intro/tutorial01.txt:803
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""
"API を使いこなせるようになったら、 :doc:`チュートリアルその2 </intro/"
"tutorial02>` に進んで、 Django が自動生成する管理インタフェースを動かしてみま"
"しょう。"

# bd4f2c4d63ee40cea71b01b0db7d70fa
#: ../../../../1.8/docs/intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr "はじめての Django アプリ作成、その2"

# f5ec5575d1f0450f8d2dc471adf5f1d1
#: ../../../../1.8/docs/intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 1 </intro/tutorial01>` の続きで"
"す。ここでは、引続き Web 投票アプリケーションの開発を例にして、Django が 自動"
"生成する admin サイトを中心に解説します。"

# 77b77708333c4a85a5fdb4804fc52ba3
#: ../../../../1.8/docs/intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""
"コンテンツの追加や変更、削除を行うためのスタッフや顧客向けの管サイト 構築は、"
"創造性の欠けた退屈なものです。そこで、 Django ではモデルを管 理するためのイン"
"タフェース生成を完全に自動化しています。"

# eabb0039e3fa4641865dfb6755c42c5a
#: ../../../../1.8/docs/intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""
"Django はニュースルーム環境で開発されました。ニュースルーム環境では、 「コン"
"テンツの作成者 (content publisher)」と「公開 (public) 」サイトをきわめて明確"
"に区別しています。サイト管理者は新たな話題やイベント、 スポーツのスコアなどの"
"入力にシステムを使い、コンテンツは公開用サイト上で表示されます。 Django は、"
"サイト管理者向けの一元化されたコンテンツ編集インタフェースを提供しています。"

# 9b7e9120801c4813a69df29c8ca7c47b
#: ../../../../1.8/docs/intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""
"admin はサイトの訪問者でなく、サイト管理者に使われることを意図しています。"

# 70fa931702074b30a7a571248b6f9494
#: ../../../../1.8/docs/intro/tutorial02.txt:25
#, fuzzy
msgid "Creating an admin user"
msgstr "最後の管理者ユーザを削除できません。\n"

# bdb10e33cabd48b7b1225d110263633d
#: ../../../../1.8/docs/intro/tutorial02.txt:27
msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""

# e7ff553c863644e28e3a5ab34e535a34
#: ../../../../1.8/docs/intro/tutorial02.txt:34
#, fuzzy
msgid "Enter your desired username and press enter."
msgstr "ユーザー名とパスワードを入力してください:"

# 34c5fff9c8664df98f95ccdf307efd1f
#: ../../../../1.8/docs/intro/tutorial02.txt:40
msgid "You will then be prompted for your desired email address:"
msgstr ""

# e391eceaf3264c4c9358596a50a542a4
#: ../../../../1.8/docs/intro/tutorial02.txt:46
msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr ""

# 8c65dbce1c9e4c04a75d3432540f54a0
#: ../../../../1.8/docs/intro/tutorial02.txt:56
msgid "Start the development server"
msgstr "開発サーバーの起動"

# 1795be5459ab422fad9084d3af28e7ef
#: ../../../../1.8/docs/intro/tutorial02.txt:58
msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""

# 2cddeac009114b448888c5d0f55196a0
#: ../../../../1.8/docs/intro/tutorial02.txt:61
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""
"チュートリアルその 1 で、開発サーバを以下のように起動したのを思い出してくださ"
"い:"

# 99dd7e4592434483950ec1711537ea46
#: ../../../../1.8/docs/intro/tutorial02.txt:67
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""
"次はブラウザを起動して、ローカルドメインの “/admin/” 、つまり "
"http://127.0.0.1:8000/admin/ にアクセスします。以下のような admin のログイ ン"
"画面が表示されるはずです:"

# 74bac2c2c236416fb38120ad85439fef
#: ../../../../1.8/docs/intro/tutorial02.txt:73
msgid ""
"Since :doc:`translation </topics/i18n/translation>` is turned on by default, "
"the login screen may be displayed in your own language, depending on your "
"browser's settings and on whether Django has a translation for this language."
msgstr ""

# 4496868f80854809a278038560af320c
# d80e4b6094164cd49d1a60e8aefc41ac
#: ../../../../1.8/docs/intro/tutorial02.txt:77
#: ../../../../1.8/docs/intro/tutorial03.txt:118
msgid "Doesn't match what you see?"
msgstr "自分のレイアウトと違う場合"

# ae4e17cc37654d07b7783a072566080c
#: ../../../../1.8/docs/intro/tutorial02.txt:79
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""
"もしこの時点で、上のログイン画面の代わりに以下のようなエラーの画面が表示され"
"た場合は:"

# 864eb81987364e6e98767878ff1d5517
#: ../../../../1.8/docs/intro/tutorial02.txt:86
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""
"おそらくこのチュートリアルのバージョンとは違う Django のバージョンを 使用して"
"いることでしょう。古いチュートリアルを参照するか、新しいバージョンの Django "
"を入手してください。"

# 6f0b4be8eabd4424a68d562f56d77796
#: ../../../../1.8/docs/intro/tutorial02.txt:91
msgid "Enter the admin site"
msgstr "admin サイトに入る"

# 7d97b7df397b4d1097addf01d846d7cc
#: ../../../../1.8/docs/intro/tutorial02.txt:93
msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""

# 3f8a93047d4f478e90be1d989b428c65
#: ../../../../1.8/docs/intro/tutorial02.txt:99
msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped "
"by Django."
msgstr ""

# e958ba2ae3bf4e179aa44f7ea7875b74
#: ../../../../1.8/docs/intro/tutorial02.txt:104
msgid "Make the poll app modifiable in the admin"
msgstr "Poll アプリを admin 上で編集できるようにする"

# fd68523a96f748a1a77e11ca7b3a697d
#: ../../../../1.8/docs/intro/tutorial02.txt:106
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""
"ところで、 polls アプリはどこにあるんでしょう？ admin のインデクスページを見"
"ても表示されていませんね。"

# b32652f437f5436284d21644f07bc2d2
#: ../../../../1.8/docs/intro/tutorial02.txt:108
msgid ""
"Just one thing to do: we need to tell the admin that ``Question`` objects "
"have an admin interface. To do this, open the :file:`polls/admin.py` file, "
"and edit it to look like this:"
msgstr ""

# a7228393cb524d6991d22e4396602a40
#: ../../../../1.8/docs/intro/tutorial02.txt:122
msgid "Explore the free admin functionality"
msgstr "admin の機能を探究してみる"

# b68c6e04a6e341e48462094888b97812
#: ../../../../1.8/docs/intro/tutorial02.txt:124
msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""

# 2db7b47484404b8abef1d44cfc9323bf
#: ../../../../1.8/docs/intro/tutorial02.txt:130
msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one "
"to change it. There's the \"What's up?\" question we created in the first "
"tutorial:"
msgstr ""

# 46bfce4f81664e5384906c9b4cdad9fc
#: ../../../../1.8/docs/intro/tutorial02.txt:137
msgid "Click the \"What's up?\" question to edit it:"
msgstr ""

# 4a7977c511cd49b6a29589b795dd6014
#: ../../../../1.8/docs/intro/tutorial02.txt:142
msgid "Things to note here:"
msgstr "以下の点に注意してください:"

# d00c73d1dd6a45988b11c6ead14c0a7e
#: ../../../../1.8/docs/intro/tutorial02.txt:144
msgid "The form is automatically generated from the ``Question`` model."
msgstr ""

# 4bea0eac778541b7a63da24e3aba899e
#: ../../../../1.8/docs/intro/tutorial02.txt:146
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""
"モデルのフィールドの型 (:class:`~django.db.models.DateTimeField` 、 :class:"
"`~django.db.models.CharField` など) によって適切な HTML 入力ウィジェッ トが対"
"応しています。各種のフィールドには Django 管理サイトでデー タを表示する方法が"
"定義されています。"

# bcba53e0e3974d299a5c11741ef3acd0
#: ../../../../1.8/docs/intro/tutorial02.txt:151
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""
"各 :class:`~django.db.models.DateTimeField` は JavaScript ショートカットがつ"
"いています。日付 (dates) のカラムには「今日 (today)」 へのショートカットとカ"
"レンダーポップアップボタンがあります。 時刻 (times) には「現在 (now)」への"
"ショートカットと、よく入力される時刻のリストを表示するポップアップボタンがあ"
"ります。"

# 07e082fae09c4a89af584fc5e71ca79e
#: ../../../../1.8/docs/intro/tutorial02.txt:155
msgid "The bottom part of the page gives you a couple of options:"
msgstr "ページの末尾の部分には操作ボタンがいくつか表示されています:"

# fcc45b651b2c4c8ab945d49f493f01e9
#: ../../../../1.8/docs/intro/tutorial02.txt:157
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""
"保存 (Save) – 変更を保存して、このモデルのチェンジリストのページに戻ります。"

# 17cd030d5eb048a89835a61144e54c45
#: ../../../../1.8/docs/intro/tutorial02.txt:160
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""
"保存して編集を続ける (Save and continue editing) – 変更を保存して、このオブ"
"ジェクトの編集ページをリロードします。"

# d9d011eab2b34385bf4f3707a60bd499
#: ../../../../1.8/docs/intro/tutorial02.txt:163
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""
"保存してもう一つ追加 (Save and add another) – 変更を保存して、このモデルのオ"
"ブジェクトを新規追加するための空の編集ページをロードします。"

# e363f51292bf44338dabd73760ec239b
#: ../../../../1.8/docs/intro/tutorial02.txt:166
msgid "Delete -- Displays a delete confirmation page."
msgstr "削除 (Delete) – 削除確認ページを表示します。"

# 8a0ad20a771146ed9dea2f6ce652303d
#: ../../../../1.8/docs/intro/tutorial02.txt:168
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# 5d1c44883bb84bb0a7aad4ba4b17c71b
#: ../../../../1.8/docs/intro/tutorial02.txt:173
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""
"「今日」や「現在」ショートカットをクリックして、「Date published」を変更して"
"みましょう。変更したら、「保存して編集を続ける」を押します。次に、右上に ある"
"「履歴 (History)」をクリックしてみましょう。ユーザが管理サイト上でオブジェク"
"トに対して行った変更履歴の全てを、変更時刻と変更を行ったユーザ名付きでリスト"
"にしたページが表示されます:"

# c9d1f62718f94e84bfe54b6a6d4349ab
#: ../../../../1.8/docs/intro/tutorial02.txt:182
msgid "Customize the admin form"
msgstr "admin フォームのカスタマイズ"

# c56c1987895f4ee6bb3ca7f2ba7b3eae
#: ../../../../1.8/docs/intro/tutorial02.txt:184
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the ``Question`` model with ``admin.site.register(Question)``, "
"Django was able to construct a default form representation. Often, you'll "
"want to customize how the admin form looks and works. You'll do this by "
"telling Django the options you want when you register the object."
msgstr ""

# 89e342ae18d5458a85deaa6ef72a2edc
#: ../../../../1.8/docs/intro/tutorial02.txt:190
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Question)`` line with:"
msgstr ""

# 5e04eabcadb841e5a260a75875aecb77
#: ../../../../1.8/docs/intro/tutorial02.txt:206
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""
"このように、 admin のオプションを変更したいときには、モデルごとに admin オブ"
"ジェクトを生成して、 ``admin.site.register()`` の 2 番目の引数に渡すと いうパ"
"ターンに従ってください。"

# f02afdf96bc646da83cae083793f2f23
#: ../../../../1.8/docs/intro/tutorial02.txt:210
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""
"上の例では、「Publication date」フィールドの表示位置を「Question」フィールド"
"よりも前に変更しています:"

# a4dc8712923743e4a4977498d01654b7
#: ../../../../1.8/docs/intro/tutorial02.txt:216
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""
"二つしかフィールドがないので、あまりぱっとした変化ではありませんね。しかし "
"admin フォームで何ダースものフィールドを操作するような場合には、直感的な"
"フィー ルドの並び順というものはユーザビリティ上重要な要素です。"

# 7a982828ddd54328bde617a277257fbc
#: ../../../../1.8/docs/intro/tutorial02.txt:219
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr ""

# db0c34d4896940cd840bfd0a8873c289
#: ../../../../1.8/docs/intro/tutorial02.txt:238
msgid ""
"The first element of each tuple in :attr:`~django.contrib.admin.ModelAdmin."
"fieldsets` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""

# b353afd2073e45fab8733e205268567a
#: ../../../../1.8/docs/intro/tutorial02.txt:245
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used:"
msgstr ""

# 382a88c7d3d44f6aa6459f66239d86e3
#: ../../../../1.8/docs/intro/tutorial02.txt:270
msgid "Adding related objects"
msgstr "リレーションを張ったオブジェクトの追加"

# 6053e77c750a44b99e29481957ff8515
#: ../../../../1.8/docs/intro/tutorial02.txt:272
msgid ""
"OK, we have our Question admin page. But a ``Question`` has multiple "
"``Choices``, and the admin page doesn't display choices."
msgstr ""

# 642ffdf11459433ca4f1b95c50d1bc46
#: ../../../../1.8/docs/intro/tutorial02.txt:275
msgid "Yet."
msgstr "今はまだ。"

# 8cb459cf76fa4c5287030ecd7be60fb3
#: ../../../../1.8/docs/intro/tutorial02.txt:277
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``. That's easy:"
msgstr ""

# a9726164b2574bccb9be72eaed8cbb62
#: ../../../../1.8/docs/intro/tutorial02.txt:289
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""
"これで、 Django の管理サイト上で「Choice」 を選べます。「Choice の追加」"
"フォーム は以下のようになります::"

# b001a5f20807485fa60c6a13587e3404
#: ../../../../1.8/docs/intro/tutorial02.txt:295
msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a :class:`~django.db.models."
"ForeignKey` should be represented in the admin as a ``<select>`` box. In our "
"case, only one question exists at this point."
msgstr ""

# bfe51fe9947f4e29ae4b8be93b505f41
#: ../../../../1.8/docs/intro/tutorial02.txt:300
msgid ""
"Also note the \"Add Another\" link next to \"Question.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add question\" form. "
"If you add a question in that window and click \"Save,\" Django will save "
"the question to the database and dynamically add it as the selected choice "
"on the \"Add choice\" form you're looking at."
msgstr ""

# ebc017c02b2c495f9b861a19b2b1415f
#: ../../../../1.8/docs/intro/tutorial02.txt:307
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Question`` object. Let's make that happen."
msgstr ""

# e77fef63504e4ee185e80c24fcb7aff4
#: ../../../../1.8/docs/intro/tutorial02.txt:311
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""

# f937379f8abc42dfa7a2ec64522e414d
#: ../../../../1.8/docs/intro/tutorial02.txt:336
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""

# 0221660c9cb54ef7a545fac36a6e27f4
#: ../../../../1.8/docs/intro/tutorial02.txt:339
msgid "Load the \"Add question\" page to see how that looks:"
msgstr ""

# 0d27c6f8975e4cb6b636c88665c9157b
#: ../../../../1.8/docs/intro/tutorial02.txt:344
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""
"変わった点をみてみましょう。リレーション相手である ``Choice`` を表示するため"
"に 3 つのスロットがあります (``extra`` に指定した数ですね)。また、作成済みの"
"オブジェクトを「編集する」ページに行けば、いつでも 3 つ余分のスロットが表示さ"
"れるはずです。"

# ff61274ed4b74d65a2519b2ac008f4f0
#: ../../../../1.8/docs/intro/tutorial02.txt:348
msgid ""
"At the end of the three current slots you will find an \"Add another Choice"
"\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. Note that you can't remove the original three slots. This image shows "
"an added slot:"
msgstr ""
"現状ある3つのスロットの末尾に、「他の Choice を追加する (Add another "
"Choice)」リンクがあります。クリックすると、新しいプロットが追加されます。追加"
"されたスロットを削除したい場合は、追加されたスロット右上の 'X' をクリックして"
"ください。最初からある 3 つのスロットを削除できないことに注意してください。こ"
"の画像は追加されたスロットのみで有効です。"

# 8eca485718404f3c80929a965e75bcc7
#: ../../../../1.8/docs/intro/tutorial02.txt:356
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read:"
msgstr ""

# 2f9e34379cab4c5d8adc1fdb19a835ca
#: ../../../../1.8/docs/intro/tutorial02.txt:367
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""
"``StackedInline`` に変わって ``TabularInline`` を使うと、 リレーション相手の"
"オブジェクトはよりコンパクトなテーブル形式で表示されます:"

# cc593f1a4dd648b3a6edcc8cada5d176
#: ../../../../1.8/docs/intro/tutorial02.txt:373
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""
"追加の \"Delete?\" カラムがあることに注意してください。 \"Added Another "
"Choice\" ボタンで追加された行とすでに保存された行を削除するためにあります。"

# d75ed0c61ee14c69adca375c2f0567f5
#: ../../../../1.8/docs/intro/tutorial02.txt:377
msgid "Customize the admin change list"
msgstr "管理サイトのチェンジリストページをカスタマイズする"

# b3dec7fff8a24a60a4021d2c0d37594f
#: ../../../../1.8/docs/intro/tutorial02.txt:379
msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""

# 78ca86d1bf04477f8166fa00a08b8651
#: ../../../../1.8/docs/intro/tutorial02.txt:382
msgid "Here's what it looks like at this point:"
msgstr "ここでは以下のようになります:"

# e7da006384894b0992b0d4683a94c702
#: ../../../../1.8/docs/intro/tutorial02.txt:387
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the :"
"attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is "
"a tuple of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""

# 6a7ba6a1f0fa4fb2a21c3968fdcfe039
#: ../../../../1.8/docs/intro/tutorial02.txt:400
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1:"
msgstr ""

# deec7beba3f64504a6f6764ed7488d8a
#: ../../../../1.8/docs/intro/tutorial02.txt:410
msgid "Now the question change list page looks like this:"
msgstr ""

# 5d5b454c875a4150962e74005237d9b9
#: ../../../../1.8/docs/intro/tutorial02.txt:415
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""
"カラムのヘッダをクリックすると、カラムの値に応じてエントリを並べ換えできま"
"す。ただし ``was_published_recently`` ヘッダは例外で、これはメソッドの戻り値"
"を 使った並べ換えをサポートしていないからです。 ``was_published_recently`` の"
"カラムヘッダのデフォルト値がメソッドの名前になっている (アンダースコアは空白"
"に置き換わっている)こと、各行が戻り値の文字列となっていることにも注意して下さ"
"い。"

# cd5992ee13094f448834346cbb1f4d97
#: ../../../../1.8/docs/intro/tutorial02.txt:422
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows:"
msgstr ""

# 6d96c497e77b4cf091db68e71feb462d
#: ../../../../1.8/docs/intro/tutorial02.txt:436
msgid ""
"For more information on these method properties, see :attr:`~django.contrib."
"admin.ModelAdmin.list_display`."
msgstr ""

# 115620accd6945988c6cd35d8f3eb16c
#: ../../../../1.8/docs/intro/tutorial02.txt:439
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`. Add the following line to ``QuestionAdmin``::"
msgstr ""

# bf10af1af9b84cb9be197a341bece3e9
#: ../../../../1.8/docs/intro/tutorial02.txt:446
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""
"これで、「フィルタ (Filter)」サイドバーができ、チェンジリストを ``pub_date`` "
"フィールドの値に従ってフィルタできるようになります:"

# 800917ed44dc456fa89e1f27ee4daafe
#: ../../../../1.8/docs/intro/tutorial02.txt:452
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""
"表示されるフィルタのタイプは、フィルタに使うフィールドのタイプによって変わり"
"ます。 ``pub_date`` は :class:`~django.db.models.DateTimeField` なので、 "
"Django はデフォルトのフィルタのオプションとして 「すべての日 (Any date)」、"
"「今日 (Today)」、「過去 7 日間 (Past 7 days)」、 「今月 (This month)」そして"
"「今年 (This year)」を与えればよいと考えます。"

# 788617cfe9bb47c9aad5c2db2189357e
#: ../../../../1.8/docs/intro/tutorial02.txt:457
msgid "This is shaping up well. Let's add some search capability::"
msgstr "細工は隆々ですね。今度は検索機能を追加してみましょう::"

# a74b9eac36c94e669bc8b4954f39987b
#: ../../../../1.8/docs/intro/tutorial02.txt:461
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as "
"many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""

# ec95815c77944f648db5fa8f764400e1
#: ../../../../1.8/docs/intro/tutorial02.txt:467
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters <django."
"contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies <django."
"contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-ordering "
"<django.contrib.admin.ModelAdmin.list_display>` all work together like you "
"think they should."
msgstr ""

# 4abbe1b862024b33b3dfbb96a59e044c
#: ../../../../1.8/docs/intro/tutorial02.txt:477
msgid "Customize the admin look and feel"
msgstr "管理サイトのルック & フィールをカスタマイズする"

# b4aeb4f91d764c70b6f8f496c6902ea1
#: ../../../../1.8/docs/intro/tutorial02.txt:479
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""
"管理サイトの上部には「Django 管理 (Django adminstration)」と表示されています"
"が、これはいささか滑稽ですね。これは単なるプレースホルダテキストにすぎませ"
"ん。"

# 18d2dc81d06a49f7a5563ca331855b16
#: ../../../../1.8/docs/intro/tutorial02.txt:482
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""
"変更するのは簡単で、 Django のテンプレートシステムを使います。 Django の管理"
"サイトは、それ自身 Django で作られているので、インタフェースは Django のテン"
"プレートシステムを使っています。"

# 3d54e296cf674a55b0cafdec1c6d0365
#: ../../../../1.8/docs/intro/tutorial02.txt:489
msgid "Customizing your *project's* templates"
msgstr "*プロジェクト* テンプレートをカスタムする。"

# 00552ef64b234b56af6cbbd0a19bdad4
#: ../../../../1.8/docs/intro/tutorial02.txt:491
msgid ""
"Create a ``templates`` directory in your project directory (the one that "
"contains ``manage.py``). Templates can live anywhere on your filesystem that "
"Django can access. (Django runs as whatever user your server runs.) However, "
"keeping your templates within the project is a good convention to follow."
msgstr ""

# 00cdc31820594a83ab950286cfa9a4a7
#: ../../../../1.8/docs/intro/tutorial02.txt:496
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""

# 44b86b78d4c540efa818f0cc0edc58a8
#: ../../../../1.8/docs/intro/tutorial02.txt:518
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""

# 61344b3bb12c48b1b81f525fb9392ce6
#: ../../../../1.8/docs/intro/tutorial02.txt:521
msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself (``django/contrib/"
"admin/templates``) into that directory."
msgstr ""

# e19ef51f7ceb408c8a853314156a6653
#: ../../../../1.8/docs/intro/tutorial02.txt:526
msgid "Where are the Django source files?"
msgstr ""

# a0a33dc32b754189b0bededd46ffa2d8
#: ../../../../1.8/docs/intro/tutorial02.txt:528
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""
"Django のソースファイルがシステム中のどこにあるのか分からない場合は、以下のコ"
"マンドを実行してください:"

# c1aa305036fa415fa827994bba01a987
#: ../../../../1.8/docs/intro/tutorial02.txt:539
msgid ""
"Then, just edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name "
"as you see fit. You should end up with a section of code like:"
msgstr ""

# 3e59fe4c48c84f918c7ab820af81ad05
#: ../../../../1.8/docs/intro/tutorial02.txt:550
msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the :attr:`django.contrib.admin.AdminSite."
"site_header` attribute to more easily make this particular customization."
msgstr ""

# beedba99b3b44285b3a8477fc46a408c
#: ../../../../1.8/docs/intro/tutorial02.txt:555
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""
"このテンプレートファイルは \"{% block branding %}\" や \"{{ title }}\" のよう"
"なテキストを多く含んでいます。 \"{%\" と \"{{\" タグは Django のテンプレート"
"言語の一部です。Djangoが \"admin/base_site.html\" をレンダリングする場合この"
"テンプレート言語が実行され、最終的なHTMLページが出力されます。今テンプレート"
"について何もわからなくても心配しないでください。チュートリアル3で Django のテ"
"ンプレート言語について掘り下げていきます。"

# eff92d1f730f48a4a8175ffa73fb253d
#: ../../../../1.8/docs/intro/tutorial02.txt:562
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""
"Django のデフォルトの admin 用テンプレートは上書き可能です。上書きするには、"
"ただ ``base_site.html`` にしたことと同じことをしてください。デフォルトのディ"
"レクトリからカスタム用のディレクトリにコピーして、変更してください。"

# 6b84ee866ce245b1b3972dd442525d87
#: ../../../../1.8/docs/intro/tutorial02.txt:568
msgid "Customizing your *application's* templates"
msgstr "*アプリケーション用の* テンプレートをカスタマイズする"

# a39c1a903c494f85a2858603abc5cad9
#: ../../../../1.8/docs/intro/tutorial02.txt:570
msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that ``django."
"contrib.admin`` is an application)."
msgstr ""

# 520fb3462d874db1bf43543bcf3313b3
#: ../../../../1.8/docs/intro/tutorial02.txt:577
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""
"投票アプリケーションはそれほど複雑ではないので、カスタムのアドミンテンプレー"
"トは必要ないでしょう。しかしより凝ったものに成長したり、機能のため標準の "
"admin テンプレートの変更は必要となった場合、 *アプリケーションの* テンプレー"
"トを編集するのは、 *プロジェクト* のそれを編集するより賢い選択になるでしょ"
"う。それにより、投票アプリケーションを他のどの新しいプロジェクトに追加できま"
"す。そのアプリが必要としているカスタムテンプレートを見つけることも見つけるこ"
"ともできます。"

# ea851f8f6a7c4cf18c057b14f43fb4ae
#: ../../../../1.8/docs/intro/tutorial02.txt:584
msgid ""
"See the :ref:`template loading documentation <template-loading>` for more "
"information about how Django finds its templates."
msgstr ""

# 5fa7205c249e472fab838d4fb284da1b
#: ../../../../1.8/docs/intro/tutorial02.txt:588
msgid "Customize the admin index page"
msgstr "admin index ページをカスタムする"

# b984c20b63c740f2a8a690d242657a4f
#: ../../../../1.8/docs/intro/tutorial02.txt:590
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""
"近い話題として、 Django の admin index ページのルックアンドフィールをカスタマ"
"イズもできます。"

# bfb43c537025498bb4be95ff558b14a1
#: ../../../../1.8/docs/intro/tutorial02.txt:593
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""
"デフォルトでは、 :settings:`INSTALLED_APPS` の全てのアプリを表示します。つま"
"り admin アプリケーションに登録されたアプリケーションを、アルファベット順に表"
"示されるということです。レイアウトに何か重要な変更をしたいかも知れません。な"
"んといっても index ページは admin のなかで最も重要なページで、使いやすくある"
"べきです。"

# 8c3364959e03400c9d6cb254e87ad37d
#: ../../../../1.8/docs/intro/tutorial02.txt:598
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""
"カスタマイズ対象のテンプレートは \"admin/index.html\" です。 (前セクションで "
"\"admin/base_site.html\" にしたことと同じことをしてください。デフォルトのディ"
"レクトリからコピーして、カスタムテンプレートのディレクトリに配置してくださ"
"い)。編集してみると \"app_list\" というテンプレート変数が使われているのが見え"
"るでしょう。この変数はインストールされた全 Django アプリを含んでいます。ベス"
"トだと思うなら、これを使う代わりに、オブジェクト固有の管理ページヘのリンクを"
"ハードコードをしてもよいです。しつこいようですが、テンプレート言語の理解でき"
"なくても心配しないでください。より詳細にはチュートリアル3でカバーされます。"

# 390bf06fe0374db5bc990c7007c8212f
#: ../../../../1.8/docs/intro/tutorial02.txt:607
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""
"admin サイトが満足すれば、 :doc:`チュートリアルその3 </intro/tutorial03>` に"
"進んで、公開用の投票ビューを作りましょう。"

# 0bb54970629843c0be1af25e7703f143
#: ../../../../1.8/docs/intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr "はじめての Django アプリ作成、その 3"

# 93d929b333e142c0964397b8eb3e7c50
#: ../../../../1.8/docs/intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 2 </intro/tutorial02>` の続きで"
"す。ここでは、引続き Web 投票アプリケーションの開発を例にして、公開用のインタ"
"フェース、ビュー(view) の作成を焦点に解説します。"

# 942dc6a055d740939d2a15f85836a6cb
#: ../../../../1.8/docs/intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""
"ビューとは、 Django のアプリケーションにおいて特定の機能を提供するウェブペー "
"ジの「型 (type)」であり、各々のテンプレートを持っています。例えばブログアプリ"
"ケーションなら、以下のようなビューがあるでしょう:"

# 2691c631f00347bc95f1d76b259dc635
#: ../../../../1.8/docs/intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr "Blog ホームページ - 最新エントリーをいくつか表示"

# 54db2a5530a0487a951e2b87d7f680e8
#: ../../../../1.8/docs/intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr "エントリー詳細ページ - 1エントリーへのパーマリンク (permalink) ページ"

# 861a7f1935b448e4981e001baaf938b3
#: ../../../../1.8/docs/intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr "年ごとのアーカイブページ - 指定された年のエントリーの月を全て表示"

# e895ddca13344fa1a6734fff1cccc85b
#: ../../../../1.8/docs/intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr "月ごとのアーカイブページ - 指定された月のエントリーの日をすべて表示"

# dd834ec8d6874912b911d5232b84c773
#: ../../../../1.8/docs/intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr "日ごとのアーカイブページ - 指定された日の全てのエントリーを表示"

# 10204f880b934d3dbd2ff3dd4c70e7a6
#: ../../../../1.8/docs/intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr "コメント投稿 - エントリーに対するコメントの投稿を受付"

# 657199e29d974b6691fa154d9931260a
#: ../../../../1.8/docs/intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr "投票アプリケーションでは、以下4つのビューを作成します:"

# 59c67e68df924786bf60547ebc3696f7
#: ../../../../1.8/docs/intro/tutorial03.txt:32
msgid "Question \"index\" page -- displays the latest few questions."
msgstr "質問 \"インデックス\" ページ -- 最新の質問をいくつか表示"

# d98428b461974cd7b48c08be28fd6dc4
#: ../../../../1.8/docs/intro/tutorial03.txt:34
msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""
"質問 \"詳細\" ページ -- 結果を表示せず、質問テキストと投票フォームを表示"

# 240ccaa9a33b42f7b8b47c8b34ef0de9
#: ../../../../1.8/docs/intro/tutorial03.txt:37
msgid ""
"Question \"results\" page -- displays results for a particular question."
msgstr "質問 \"結果\" ページ -- 特定の質問の結果を表示"

# 61738f8688844ef9830755bdbdba6dc1
#: ../../../../1.8/docs/intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr "投票ページ -- 特定の質問の選択を投票として受付"

# 76757606bf304442bf84b519ceba199e
#: ../../../../1.8/docs/intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""
"Django へだ、各ページとコンテンツはビューによって提供されます。各ビューは単純"
"に Python 関数 (クラスベースビューの場合はメソッド) として実装されています。 "
"Django はビューを、リクエストされたURLから決定します (正確には、URLのドメイン"
"移行の部分)"

# 7cc73c531ebb41a49c05ac698fe411ea
#: ../../../../1.8/docs/intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as \"ME2/"
"Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""
"インターネットサーフィンをしてるときなどに、 \"ME2/Sites/dirmod.asp?"
"sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\" のような美しいURLを"
"見かけることがあるでしょう。 Django はこんなものよりもっとエレガントな \"URL"
"パターン\" を提供していると知っておいてください。"

# d44f5517930d47849b703d3e2c99eeaf
#: ../../../../1.8/docs/intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: ``/"
"newsarchive/<year>/<month>/``."
msgstr ""
"URLパターンはURLをシンプルに一般化したものです。例えば \"/newsarchive/<year>/"
"<month>/\" などです。"

# 02e3713dc06942d1920beccf72d8d484
#: ../../../../1.8/docs/intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""
"URLからビューには、 Django は 'URLconfs' として知られているものを使います。 "
"URLconf は (正規表現で表される) URLパターンとビューを対応付けます。"

# 0097eae82bb54e558004d7c5f7bfb328
#: ../../../../1.8/docs/intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""
"このチュートリアルでは基本的な URLconf の使い方を紹介します。詳細については :"
"mod:`django.core.urlresolvers` を参照してください。"

# 4e751d0a429f4f7793fc28cc8f5f542a
#: ../../../../1.8/docs/intro/tutorial03.txt:62
msgid "Write your first view"
msgstr "はじめてのビュー作成"

# d93899a877054867a0e172ad28935a02
#: ../../../../1.8/docs/intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr ""
"最初のビューを書いてみましょう。 ``polls/views.py`` を開いて、以下の Python "
"コードを書いてください:"

# c3efd5613d094507bb725656842b29c3
#: ../../../../1.8/docs/intro/tutorial03.txt:76
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""
"Django上で最も単純なビューです。ビューを呼ぶために、 URL を対応付けしてやる必"
"要があります。 URLconf が必要ですね。"

# 7a02f99605294efd8e688c831ae17c1a
#: ../../../../1.8/docs/intro/tutorial03.txt:79
msgid ""
"To create a URLconf in the polls directory, create a file called ``urls."
"py``. Your app directory should now look like::"
msgstr ""
"polls ディレクトリに URLconf を作るには ``urls.py`` というファイルを作りま"
"す。アプリのディレクトリはこのようになっているはずです::"

# 2ae5a3d220604f279261f0c76406ee3d
#: ../../../../1.8/docs/intro/tutorial03.txt:90
msgid "In the ``polls/urls.py`` file include the following code:"
msgstr "``polls/urls.py`` ファイルには以下のコードを書いてください:"

# 0ae16673ef294592aa744eda08a6b2c0
#: ../../../../1.8/docs/intro/tutorial03.txt:103
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with:"
msgstr ""
"次のステップはルート URLconf に ``polls.urls`` モジュールを指定することで"
"す。 ``mysite/urls.py`` に :func:`~django.conf.urls.include` を以下のように追"
"加してください:"

# 1676a82f81f546aebb2042a3d953fc13
#: ../../../../1.8/docs/intro/tutorial03.txt:120
msgid ""
"If you're seeing ``admin.autodiscover()`` before the definition of "
"``urlpatterns``, you're probably using a version of Django that doesn't "
"match this tutorial version.  You'll want to either switch to the older "
"tutorial or the newer Django version."
msgstr ""

# 99a5f8b32ccf44a8b58a096c042882e8
#: ../../../../1.8/docs/intro/tutorial03.txt:125
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to http://"
"localhost:8000/polls/ in your browser, and you should see the text \"*Hello, "
"world. You're at the polls index.*\", which you defined in the ``index`` "
"view."
msgstr ""

# c62087f8237b4d909fc74b502b1f264f
#: ../../../../1.8/docs/intro/tutorial03.txt:130
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""
":func:`~django.conf.urls.url` 関数は4つの引数を受け取り、そのうち2つが必須で"
"す。 ``regex`` と ``view`` 、オプションで ``kwargs`` と ``name`` です。ここで"
"引数が何のためにあるものかを見ておきましょう。"

# bca34d0f5f094928af3b45f4e32102c8
#: ../../../../1.8/docs/intro/tutorial03.txt:135
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ":func:`~django.conf.urls.url` 引数: regex"

# 8daf8123bd0f46f58f5d65d32af02b9c
#: ../../../../1.8/docs/intro/tutorial03.txt:137
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular expression"
"\", which is a syntax for matching patterns in strings, or in this case, url "
"patterns. Django starts at the first regular expression and makes its way "
"down the list,  comparing the requested URL against each regular expression "
"until it finds one that matches."
msgstr ""
"\"regex\" という単語は省略形で、一般的に \"regular expression\" という意味が"
"あります。これは文字列にマッチするパターンの構文で、この場合はURLパターンにあ"
"たります。 Django ははじめの正規表現から開始し、リストを順に下に見ていきま"
"す。リクエストされたURLと各正規表現を、マッチするものが見つかるまで比較しま"
"す。"

# 076154133e8148a28dab0dde3d2123c0
#: ../../../../1.8/docs/intro/tutorial03.txt:143
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to ``http://www.example.com/"
"myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www."
"example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""
"これらの正規表現は GET, POST のパラメータや、ドメイン名からは検索しません。例"
"えば ``http://www.example.com/myapp/`` へのリクエストでは、 URLconf は "
"``myapp/`` を見ます。 ``http://www.example.com/myapp/?page=3`` の場も同じ"
"く、 URLconf は ``myapp/`` を見ます。"

# ccf57548085447539d7164d62b36f727
#: ../../../../1.8/docs/intro/tutorial03.txt:149
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""
"正規表現についてわからないことがあれば `Wikipediaのエントリー`_ と :mod:`re` "
"モジュールのドキュメントを参照してください。オライリーから出版されている "
"Jeffery Friendl の \"Mastering Reglar Expressions\" も参考になります。しかし"
"実際問題としては、正規表現のエキスパートになる必要はありません。単純なパター"
"ンをキャプチャする方法を知っていれば十分です。それに複雑な正規表現はルック"
"アップのパフォーマンスが悪いので、正規表現のフルパワーに依存するのはよくあり"
"ません。"

# 8b2c9a4e232d4d409d6d795d59586028
#: ../../../../1.8/docs/intro/tutorial03.txt:156
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""
"パフォーマンスノート: 正規表現は URLconf モジュールが読み込まれた最初にコンパ"
"イルされるので、高速に動作します (先ほど述べたように複雑すぎない場合)。"

# 646adc97265c4088a4807c10cfafcd2c
#: ../../../../1.8/docs/intro/tutorial03.txt:163
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ":func:`~django.conf.urls.url` 引数: view"

# e72365813fa7484e84c83101108bb6b7
#: ../../../../1.8/docs/intro/tutorial03.txt:165
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first "
"argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""
"Django がマッチする正規表現を見つけると、 Django は所定のビュー関数を呼び出し"
"ます。その際は :class:`~django.http.HttpRequest` オブジェクトを第一引数に、そ"
"の他、正規表現から「キャプチャされた」値を他の引数に関数を呼び出します。正規"
"表現が単純にキャプチャをしている場合は位置引数として、名前付きでキャプチャし"
"ている場合はキーワード引数として呼び出します。少し例を提示します。"

# 42776ccae4804b27ad77c5fea8175e77
#: ../../../../1.8/docs/intro/tutorial03.txt:173
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ":func:`~django.conf.urls.url` 引数: kwargs"

# 3e463d03dd554b8dbf8e4442fb407eea
#: ../../../../1.8/docs/intro/tutorial03.txt:175
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""
"任意のキーワード引数を辞書として対象のビューに渡せます。この機能はチュートリ"
"アルでは使いません。"

# a7be8856ea0c4a0e9b0d40f2021033da
#: ../../../../1.8/docs/intro/tutorial03.txt:179
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ":func:`~django.conf.urls.url` 引数: name"

# 3badd731b99941c88ffe42bb5deda730
#: ../../../../1.8/docs/intro/tutorial03.txt:181
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""
"URL に名前付けをしておけば Django のどこからでも明確に参照できます。とくにテ"
"ンプレートで有効です。この便利な機能のおかげで、プロジェクトのURLにグローバル"
"な変更を加える場合にも1つのファイルを変更するだけで済むようになります。"

# 34a2240f01714b85904fda202138fa4b
#: ../../../../1.8/docs/intro/tutorial03.txt:186
msgid "Writing more views"
msgstr "もっとビューを書いてみる"

# 6e46de2b2e594331a82e352c32b6a8d7
#: ../../../../1.8/docs/intro/tutorial03.txt:188
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""
"それではもう少しviewを``polls/vies.py``に追加していきましょう。これから追加す"
"るviewでは引数をとります。"

# 2d1c1dadb9034622ac26862078256352
#: ../../../../1.8/docs/intro/tutorial03.txt:204
msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following :"
"func:`~django.conf.urls.url` calls:"
msgstr ""
"新しいviewを``polls.urls``に追加します。:func:`~django.conf.urls.url` 呼び出"
"すview"

# daf77dae37974295aa017abbcf03460a
#: ../../../../1.8/docs/intro/tutorial03.txt:225
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""
"お使いのブラウザで、 \"/polls/34/\" を見てください。 ``detail()`` メソッドが"
"実行され、URLで提供したIDが表示されます。\"/polls/34/results/\" と \"/"
"polls/34/vote/\" も試してください。結果と投票ページのプレースホルダがそれぞれ"
"表示されます。"

# 1fd6233771034527a1861a8422ad777d
#: ../../../../1.8/docs/intro/tutorial03.txt:230
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The :func:"
"`~django.conf.urls.include` functions we are using simply reference other "
"URLconfs. Note that the regular expressions for the :func:`~django.conf.urls."
"include` functions don't have a ``$`` (end-of-string match character) but "
"rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls."
"include`, it chops off whatever part of the URL matched up to that point and "
"sends the remaining string to the included URLconf for further processing."
msgstr ""
"誰かがWebサイトの \"/polls/34/\" をリクエストすると、 Django は :setting:"
"`ROOT_URLCONF` に指定されている、 Python モジュール ``mysite.urls`` をロード"
"します。そのモジュール内の ``urlpatterns`` という変数を探し、その中に入ってい"
"る正規表現を順に検査してゆきます。:func:`~django.conf.urls.include` 関数は、"
"単に他の URLconf の参照に使用します。 :func:`~django.conf.urls.include` 関数"
"の正規表現は、 ``$``(終端マッチ文字) ではなく、スラッシュがあることに注意して"
"ください。 Django は func:`~django.conf.urls.include` を 見つけたとき、マッチ"
"した URL 一部を区切って、さらなる処理のために、インクルードした URLconf に残"
"りの部分を送ります。"

# 7d97249879bb4fabbd31797280df778d
#: ../../../../1.8/docs/intro/tutorial03.txt:242
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-"
"and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), "
"they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""
":func:`~django.conf.urls.include` の背景にある考えは、 URL のプラグ & プレイ"
"を簡単に作ることです。 polls には独自の URLconf (``polls/urls.py``) を持って"
"いるので、 \"/polls/\" 、 \"/fun_polls/\" や、 \"/content/polls/\" といった、"
"どんなパスルート下にも置けて、どこに置いてもきちんと動作します。"

# b56ff1a994c34056b270510720a924ba
#: ../../../../1.8/docs/intro/tutorial03.txt:248
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""
"このシステムでユーザが \"/polls/34/\" にアクセスすると、次のように処 理されま"
"す:"

# a13b1cb34eab484cb09c4b7e59de7307
#: ../../../../1.8/docs/intro/tutorial03.txt:250
msgid "Django will find the match at ``'^polls/'``"
msgstr "Django は ``'^polls/'`` へのマッチを検出します。"

# 11e605e539dc4fcf9d3b2d7c5af4aed9
#: ../../../../1.8/docs/intro/tutorial03.txt:252
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<question_id>[0-9]+)/$'`` resulting in a "
"call to the ``detail()`` view like so::"
msgstr ""
"Django はマッチ部分のテキスト (``\"polls/\"``) を取り去り、残りのテキスト ``"
"\"34/\"`` を 'polls.urls' という URLconf に送り、``r'^(?"
"P<question_id>[0-9]+)/$'`` にマッチする処理をさらに行い、``detail()`` ビュー"
"が呼ばれます::"

# ff1260ffc9a1453e8c02ffcebeb3c6fc
#: ../../../../1.8/docs/intro/tutorial03.txt:259
msgid ""
"The ``question_id='34'`` part comes from ``(?P<question_id>[0-9]+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<question_id>`` "
"defines the name that will be used to identify the matched pattern; and "
"``[0-9]+`` is a regular expression to match a sequence of digits (i.e., a "
"number)."
msgstr ""
"``question_id='34'`` の部分は、 ``(?P<question_id>[0-9]+)`` から来ています。"
"パターンの前後に括弧を使用すると、そのパターンにマッチしたテキストを \"キャプ"
"チャ\" し、ビュー関数の引数として、それを送信します。 ``?P<question_id>`` は"
"マッチしたパターンを識別するために使用する名前を定義します。 ``[0-9]+`` は一"
"桁以上の数字(すなわち、数)にマッチする正規表現です。"

# 5b3af0a3af3849f59f7a3dca34e86173
#: ../../../../1.8/docs/intro/tutorial03.txt:265
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""
"URL パターンは正規表現であるため、正規表現で実現できる限り制限はありません。"
"また、 ``.html`` のような文字列を URL に追加する必要もありません。ただし、次"
"のようにすれば、表現できます::"

# 8f1dfb0f4659427fa21bb5e8e056f0af
#: ../../../../1.8/docs/intro/tutorial03.txt:272
msgid "But, don't do that. It's silly."
msgstr "とはいえ、こんな阿呆なことはやめましょう。"

# 146f9461dfed41198b04e59c4b3015bd
#: ../../../../1.8/docs/intro/tutorial03.txt:275
msgid "Write views that actually do something"
msgstr "実際に動作するビューを書く"

# 0c28ce22e0664a039eaa508dc0720833
#: ../../../../1.8/docs/intro/tutorial03.txt:277
msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""
"各ビューには二つの役割があります: 一つはリクエストされたページのコ ンテンツを"
"含む :class:`~django.http.HttpResponse` オブジェクトを返すこと、もう一つは :"
"exc:`~django.http.Http404` のような例外の送出です。それ以外の処理はユーザ次第"
"です。"

# 4ea1325ed4b04fc586f4fdce770bf71c
#: ../../../../1.8/docs/intro/tutorial03.txt:282
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""
"ビューはデータベースからレコードを読みだしても、読み出さなくてもかまいませ"
"ん。 Django のテンプレートシステム、あるいはサードパーティの Python テンプ "
"レートシステムを使ってもよいですし、使わなくてもかまいません。 PDF ファイルを"
"生成しても、 XML を出力しても、 ZIP ファイルをその場で生成してもかまいませ"
"ん。 Python ライブラリを使ってやりたいことを何でも実現できます。"

# e784961bc3914be58d0c629da4fe8782
#: ../../../../1.8/docs/intro/tutorial03.txt:287
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""
"Django にとって必要なのは :class:`~django.http.HttpResponse` か、あるいは例外"
"です。"

# 1c49c228a77443a4860a4d2c46f209fd
#: ../../../../1.8/docs/intro/tutorial03.txt:289
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""

# e05bf4bd7b01490e8bc760ba3226a1d1
#: ../../../../1.8/docs/intro/tutorial03.txt:309
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""

# 962bd4b07b464faeb01dabc633c3f8ba
#: ../../../../1.8/docs/intro/tutorial03.txt:314
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""

# e994f40f358d4ebd82991d11d42ae76a
#: ../../../../1.8/docs/intro/tutorial03.txt:317
msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`. This is "
"how Django knows to find the polls templates even though we didn't modify "
"the :setting:`DIRS <TEMPLATES-DIRS>` option, as we did in :ref:`Tutorial 2 "
"<ref-customizing-your-projects-templates>`."
msgstr ""

# d0402f9b06b045499ebdc7981b45566d
#: ../../../../1.8/docs/intro/tutorial03.txt:326
#, fuzzy
msgid "Organizing templates"
msgstr "メッセージテンプレート"

# 09fabb7719c14d6badffc20404df6a54
#: ../../../../1.8/docs/intro/tutorial03.txt:328
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""

# d2bfbe3132ea4fcead52a51a258b78f8
#: ../../../../1.8/docs/intro/tutorial03.txt:336
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django simply as "
"``polls/index.html``."
msgstr ""

# 1f63e3979ce44b8e805c41b27b515ff7
#: ../../../../1.8/docs/intro/tutorial03.txt:343
#, fuzzy
msgid "Template namespacing"
msgstr "テンプレート取引"

# 4da2a3b484484209af58224c14fc3133
#: ../../../../1.8/docs/intro/tutorial03.txt:345
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""

# d05ee56680214358bd8610124994ff74
#: ../../../../1.8/docs/intro/tutorial03.txt:354
msgid "Put the following code in that template:"
msgstr ""

# bb8d26b6c79d410f9058158aa999f0fa
#: ../../../../1.8/docs/intro/tutorial03.txt:369
msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""

# f3e5a9d8ac35431e8a45c52cabc631d6
#: ../../../../1.8/docs/intro/tutorial03.txt:388
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

# c338f020f2b14a50a8d381bf99cc2965
#: ../../../../1.8/docs/intro/tutorial03.txt:392
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from Tutorial 1. The "
"link points to the question's detail page."
msgstr ""

# 6214d1c3f2bd40df9a228f42c41dc200
#: ../../../../1.8/docs/intro/tutorial03.txt:397
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

# 43ded53b42634ea995d599a9c6b4b8b0
#: ../../../../1.8/docs/intro/tutorial03.txt:399
msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""

# 7451cf39b3654b0583b80820eec1beaf
#: ../../../../1.8/docs/intro/tutorial03.txt:417
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, :class:`~django.template."
"RequestContext` and :class:`~django.http.HttpResponse` (you'll want to keep "
"``HttpResponse`` if you still have the stub methods for ``detail``, "
"``results``, and ``vote``)."
msgstr ""

# 41cf69c5ec79412db95e5490a4d61ea4
#: ../../../../1.8/docs/intro/tutorial03.txt:422
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""

# 752e2af706c1464792ddd23f0b42c091
#: ../../../../1.8/docs/intro/tutorial03.txt:428
#, fuzzy
msgid "Raising a 404 error"
msgstr "エンコーディング変換エラー: \"%1\""

# e68293b3ac514d988785572d171b4309
#: ../../../../1.8/docs/intro/tutorial03.txt:430
msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""

# 0ee6e52528f44723b772a5239145df87
#: ../../../../1.8/docs/intro/tutorial03.txt:448
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""

# 02c53fb359e64f9e94a9469293477bcb
#: ../../../../1.8/docs/intro/tutorial03.txt:451
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""

# 4e1598f672d14a02a5d4da5ec76fae12
#: ../../../../1.8/docs/intro/tutorial03.txt:460
msgid "will get you started for now."
msgstr ""

# bfde6498b86b412995bada44219928d3
#: ../../../../1.8/docs/intro/tutorial03.txt:463
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

# 16344ace310042a6b76eb200d5f71f2b
#: ../../../../1.8/docs/intro/tutorial03.txt:465
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""

# 3d8cba18e6a149d98534400f897325f2
#: ../../../../1.8/docs/intro/tutorial03.txt:480
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""

# 3dfaccf452024235bf0078afcc729bde
#: ../../../../1.8/docs/intro/tutorial03.txt:488
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""

# 6afbe5e71c3542e1a09964e48bc07b38
#: ../../../../1.8/docs/intro/tutorial03.txt:494
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

# 1ce9c58d98e846ad833128fbd9c49f8e
#: ../../../../1.8/docs/intro/tutorial03.txt:498
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""

# 535627263c54489ebba933acbe4449b0
#: ../../../../1.8/docs/intro/tutorial03.txt:505
#, fuzzy
msgid "Use the template system"
msgstr "取引テンプレートを使用"

# 8d66adc23cc04bf6b18d9a629c0410ea
#: ../../../../1.8/docs/intro/tutorial03.txt:507
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""

# 19817304968b44db825d01d4b737b6bc
#: ../../../../1.8/docs/intro/tutorial03.txt:521
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""

# 595000b217e94f0585cc11202b567178
#: ../../../../1.8/docs/intro/tutorial03.txt:527
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``question."
"choice_set.all`` is interpreted as the Python code ``question.choice_set."
"all()``, which returns an iterable of ``Choice`` objects and is suitable for "
"use in the :ttag:`{% for %}<for>` tag."
msgstr ""

# 98a77209294a4ae8986cf1203b85fff6
#: ../../../../1.8/docs/intro/tutorial03.txt:532
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

# 1a4abb0a7bd246a78c131e8d5d3dc776
#: ../../../../1.8/docs/intro/tutorial03.txt:535
msgid "Removing hardcoded URLs in templates"
msgstr ""

# 60e5cf13348541dea42efbe00044b522
#: ../../../../1.8/docs/intro/tutorial03.txt:537
msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""

# 9bca04a048314ce3b894a12870c4f069
#: ../../../../1.8/docs/intro/tutorial03.txt:544
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""

# 1e5da291d8a8450a9ebec6a39879182b
#: ../../../../1.8/docs/intro/tutorial03.txt:554
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""

# 13980b4ed48f49d49ea77e149d0ff912
#: ../../../../1.8/docs/intro/tutorial03.txt:563
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

# e998894c68e34f08aca4cca9cfc58864
#: ../../../../1.8/docs/intro/tutorial03.txt:573
#, fuzzy
msgid "Namespacing URL names"
msgstr "ファイル名の表示(_N)"

# 65029e280c7f461fb9cb2d6922a62135
#: ../../../../1.8/docs/intro/tutorial03.txt:575
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""

# 1aa028659344429e9965bc9ee575e126
#: ../../../../1.8/docs/intro/tutorial03.txt:582
msgid ""
"The answer is to add namespaces to your root URLconf. In the ``mysite/urls."
"py`` file, go ahead and change it to include namespacing:"
msgstr ""

# f95eaf94bffd459387511f8b52f95282
#: ../../../../1.8/docs/intro/tutorial03.txt:596
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

# 02207d2a746a4a9e9ec32069dcd1fa9a
#: ../../../../1.8/docs/intro/tutorial03.txt:603
msgid "to point at the namespaced detail view:"
msgstr ""

# f5dac5883a4a4821aca5189731256484
#: ../../../../1.8/docs/intro/tutorial03.txt:610
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

# 8b114ee3cab5423c984fd33590d6f4c3
#: ../../../../1.8/docs/intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr "はじめての Django アプリ作成、その 4"

# 1e3174d98de54a9ea236039f511df008
#: ../../../../1.8/docs/intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""
"このチュートリアルは :doc:`チュートリアルその 3 </intro/tutorial03>` の続きで"
"す。ここでは、引続き Web 投票アプリケーションの開発を例にして、簡単なフォー "
"ム処理とコードの縮小化を中心に解説します。"

# 184a0c3e5c0d4445a80c7229798be673
#: ../../../../1.8/docs/intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr "簡単なフォームを書く"

# 59f0debb21aa414ab2215eb154adb8ef
#: ../../../../1.8/docs/intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"それでは、前回のチュートリアルで作成した投票詳細テンプレート (\"polls/detail."
"html\") を更新して、HTML の ``<form>`` 要素を入れましょう。"

# a9f721e39240405c8d22aa74d0ff4527
#: ../../../../1.8/docs/intro/tutorial04.txt:31
msgid "A quick rundown:"
msgstr "簡単に説明:"

# 0812f5cd37ca4a84b051939db5d766de
#: ../../../../1.8/docs/intro/tutorial04.txt:33
msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""
"上のテンプレートは、各質問の選択肢のラジオボタンが表示されます。各ラジオボタ"
"ンの ``value`` は、関連する質問の選択肢のIDです。各ラジオボタンの ``name`` "
"は ``\"choice\"`` です。投票者がラジオボタンの1つを選択し、フォームを送信する"
"場合には、POSTデータ ``choice=#`` を送信します。＃の場所には選択肢のIDが入り"
"ます。これは、HTMLフォームの基本的な概念です。"

# acc22c1a30f74a1f89367000cd4cd450
#: ../../../../1.8/docs/intro/tutorial04.txt:40
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""
"フォームの ``action`` を ``{% url 'polls:vote' question.id %}`` に設定し、 さ"
"らに、 ``method=\"post\"`` を設定します。``method=\"post\"`` を使用する "
"(``method=\"get\"`` ではなく) ことは非常に重要です。なぜなら、フォームの送信"
"はサーバ側のデータの更新につながるからです。サーバ側のデータを更新するフォー"
"ムを作成する場合は、 ``method=\"post\"`` を使いましょう。これは、 Django 固有"
"のものではなく、いわば Web 開発の王道です。"

# 43aaa6f96a9d40b6a7824848b9825342
#: ../../../../1.8/docs/intro/tutorial04.txt:47
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""
"``forloop.counter`` は、ttag:`for` タグのループが何度実行されたかを表す値で"
"す。"

# 7feeda0432644a6ab6d9827f1fecf56c
#: ../../../../1.8/docs/intro/tutorial04.txt:50
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""
"POST フォーム(データを改ざんされる恐れのある) を作成しているので、クロス サイ"
"トリクエストフォージェリを心配する必要があります。ありがたいことに、 Django "
"がこれに対応するとても使いやすい仕組みを提供してくれているので、あまり心配す"
"る必要はありません。手短に言うと、全ての自サイトへの  POST フォームに、 :"
"ttag:`{% csrf_token %}<csrf_token>` テンプレートタグを使います。"

# bd3aa53cbcd04651a37d5e62efdb5017
#: ../../../../1.8/docs/intro/tutorial04.txt:57
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""
"送信されたデータを処理するための Django のビューを作成しましょう。:doc:`"
"チュートリアルその 3 </intro/tutorial03>` で、以下のような投票アプリケーショ"
"ンの URLconf を作成したことを思い出しましょう:"

# aeca8b0c16b947cf8fef5054f17e8f55
#: ../../../../1.8/docs/intro/tutorial04.txt:66
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""
"すでに、 ``vote()`` 関数のダミー実装を作成しました。今度は、本物を実装しま"
"しょう。以下を ``polls/views.py`` に追加してください:"

# 802a6668f34a43dc83cd85734974589b
#: ../../../../1.8/docs/intro/tutorial04.txt:96
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""
"このコードには、これまでのチュートリアルで扱っていなかったことがいくつか入っ"
"ています:"

# b8d10937021a4effb69b7793b990758b
#: ../../../../1.8/docs/intro/tutorial04.txt:98
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

# 6c8eb374409f410faede282a10f0123c
#: ../../../../1.8/docs/intro/tutorial04.txt:104
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""

# fecdc837ac1f405fbdae0626d660cc57
#: ../../../../1.8/docs/intro/tutorial04.txt:110
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't given."
msgstr ""

# 624ec5f81af64f33aa8c759543819d53
#: ../../../../1.8/docs/intro/tutorial04.txt:115
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""

# 9fd1ac9a694a4f90bed5352104d6bc43
#: ../../../../1.8/docs/intro/tutorial04.txt:122
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""

# c7da4b1a87784062b792b29b71cc824a
#: ../../../../1.8/docs/intro/tutorial04.txt:127
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""

# 4ebdf31aa49c41418f0c7e98ff5b8750
#: ../../../../1.8/docs/intro/tutorial04.txt:138
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""

# 9f361f6a1dd94eee9df827d69df8130d
#: ../../../../1.8/docs/intro/tutorial04.txt:141
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""

# 7a672a1db6a641b494eddb78645ff9ec
#: ../../../../1.8/docs/intro/tutorial04.txt:145
msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""

# 455e557cd9d24c93938e06ef75ebec9e
#: ../../../../1.8/docs/intro/tutorial04.txt:158
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""

# 4226809264144b8eb3dad66f7d53416c
#: ../../../../1.8/docs/intro/tutorial04.txt:162
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

# a519bbd367954a1a95c3ecea0dd4987b
#: ../../../../1.8/docs/intro/tutorial04.txt:177
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""

# c9e01fde319b42a5a4ee06284c9cbbbe
#: ../../../../1.8/docs/intro/tutorial04.txt:182
msgid "Use generic views: Less code is better"
msgstr ""

# 1fe3c0ef7bb54f2686c90b0babd48837
#: ../../../../1.8/docs/intro/tutorial04.txt:184
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very simple -- and, as mentioned above, redundant. "
"The ``index()`` view (also from Tutorial 3), which displays a list of polls, "
"is similar."
msgstr ""

# 5f04578d332b4de28eede09421ffc7ac
#: ../../../../1.8/docs/intro/tutorial04.txt:188
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

# 0bcf370131174e159a4c9226bd926e59
#: ../../../../1.8/docs/intro/tutorial04.txt:193
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

# 9addb4e596a44245b2a195744c0e4872
#: ../../../../1.8/docs/intro/tutorial04.txt:196
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

# b9bf5d6c2daa429fb98e0824b475756f
#: ../../../../1.8/docs/intro/tutorial04.txt:200
#, fuzzy
msgid "Convert the URLconf."
msgstr "そのファイルを変換する"

# c8468629beee4bac8069cd41a1b51498
#: ../../../../1.8/docs/intro/tutorial04.txt:202
msgid "Delete some of the old, unneeded views."
msgstr ""

# 7c0acd6b817043be9f0be141635b4970
#: ../../../../1.8/docs/intro/tutorial04.txt:204
msgid "Introduce new views based on Django's generic views."
msgstr ""

# eae6c139e6f54f51ac316df7071f4062
#: ../../../../1.8/docs/intro/tutorial04.txt:206
#, fuzzy
msgid "Read on for details."
msgstr "各列の詳細を表示"

# 2cc6f1812e4b4c20818c66711e994b36
#: ../../../../1.8/docs/intro/tutorial04.txt:208
#, fuzzy
msgid "Why the code-shuffle?"
msgstr "対象の言語コード"

# a345ee4f430746f0be424832ef8019a2
#: ../../../../1.8/docs/intro/tutorial04.txt:210
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

# 9a75e664a42648bd9b5c3aba165931bc
#: ../../../../1.8/docs/intro/tutorial04.txt:216
msgid "You should know basic math before you start using a calculator."
msgstr ""

# 52f6abd310364459ae00d7b404674559
#: ../../../../1.8/docs/intro/tutorial04.txt:219
msgid "Amend URLconf"
msgstr ""

# b7235ee194644b2784951368073dce2a
#: ../../../../1.8/docs/intro/tutorial04.txt:221
msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr ""

# 3176f30c96334cc7924e6a6117e2b5a2
#: ../../../../1.8/docs/intro/tutorial04.txt:237
msgid ""
"Note that the name of the matched pattern in the regexes of the second and "
"third patterns has changed from ``<question_id>`` to ``<pk>``."
msgstr ""

# 94651cd7af874507ad75214361adc45f
#: ../../../../1.8/docs/intro/tutorial04.txt:243
#, fuzzy
msgid "Amend views"
msgstr "参照回数"

# 7aea8d29b33c4e4d80572c270761d422
#: ../../../../1.8/docs/intro/tutorial04.txt:245
msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the ``polls/"
"views.py`` file and change it like so:"
msgstr ""

# bd0832fb46ea4390a4d18ced72fd8940
#: ../../../../1.8/docs/intro/tutorial04.txt:282
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""

# 61b777e2537b4cbeb30a537c8386a626
#: ../../../../1.8/docs/intro/tutorial04.txt:288
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""

# a0f35ec2408e4ed888fc7203759f946f
#: ../../../../1.8/docs/intro/tutorial04.txt:291
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``question_id`` to ``pk`` for the generic views."
msgstr ""

# ca8754b2dc4a43e49f37c00835df68c7
#: ../../../../1.8/docs/intro/tutorial04.txt:296
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a :class:`~django.views.generic.detail."
"DetailView` behind the scenes."
msgstr ""

# 7a26f8ebfeb1453ea898bf3e603d68b4
#: ../../../../1.8/docs/intro/tutorial04.txt:306
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

# e40a2ecab64a48748e39a356101263ed
#: ../../../../1.8/docs/intro/tutorial04.txt:312
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``question_list``. "
"To override this we provide the ``context_object_name`` attribute, "
"specifying that we want to use ``latest_question_list`` instead. As an "
"alternative approach, you could change your templates to match the new "
"default context variables -- but it's a lot easier to just tell Django to "
"use the variable you want."
msgstr ""

# 8e2ec01f76c14d9ba1ff817c20d74033
#: ../../../../1.8/docs/intro/tutorial04.txt:324
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

# 75f1730e7a1e4beebf01bb463dbdc75d
#: ../../../../1.8/docs/intro/tutorial04.txt:326
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""

# 59133469c607447e9f2578e8c04915f4
#: ../../../../1.8/docs/intro/tutorial04.txt:329
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

# e9acd47c947f4bc2a6e8a6aac7d21b93
#: ../../../../1.8/docs/intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr "はじめての Django アプリ作成、その 5"

# 2930987e9a434f20a64aa7aa5161c9f6
#: ../../../../1.8/docs/intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 4 </intro/tutorial04>` の続きです。"
"Web 投票アプリケーションが完成したので、今度は自動テストを作ってみましょう。"

# 4f41d90627534781bc2f9c266bed8f76
#: ../../../../1.8/docs/intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr "自動テストの導入"

# 4d577aac1fd046fabfa0a7445944287a
#: ../../../../1.8/docs/intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr "自動テストとは何ですか？"

# f0a7f2d5a9654d5db20d73dcb92abbfa
#: ../../../../1.8/docs/intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr "テストとは単純なプログラムで、あなたのコードの動作を確認します。"

# 5b6b4adc83eb4fa1beb30b94ed01e470
#: ../../../../1.8/docs/intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail (*does a particular model method return values as expected?*) while "
"others examine the overall operation of the software (*does a sequence of "
"user inputs on the site produce the desired result?*). That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 </intro/"
"tutorial01>`, using the :djadmin:`shell` to examine the behavior of a "
"method, or running the application and entering data to check how it behaves."
msgstr ""

# d58c072077634b7e9cea705d95649096
#: ../../../../1.8/docs/intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""
"*自動* テストが他と異なる点は、テスト作業がシステムによって実行されることで"
"す。一度テストセットを作成すると、それからはアプリに変更を加えるたびに、あな"
"たの意図した通りにコードが動作するか確認できます。手動でテストする時間がかか"
"ることはありません。"

# b02fc82682c24be98fdb770041b090a5
#: ../../../../1.8/docs/intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr "なぜテストを作成せねばならないのか"

# acc0c138812144e884015a394931a6c3
#: ../../../../1.8/docs/intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr "どうしてテストを作るのか？また、なぜ今なのか？"

# 4b18ac61b48d436c84bf48b6d64b62a0
#: ../../../../1.8/docs/intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""

# 77d8341d0c39466f85d3d171ba897c53
#: ../../../../1.8/docs/intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr "テストはあなたの時間を節約します"

# b91647c627de4ecd99c86d183a9d83bf
#: ../../../../1.8/docs/intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""
"ある一定の基準まで、'動くであろうことを確認すること'が十分なテストでしょう。"
"高機能なアプリケーションでは、コンポーネント間で複雑な連携が数多くあるかもし"
"れません。"

# 97098a068fd54f87b501ab65452d6b91
#: ../../../../1.8/docs/intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

# 32f3ea7b7eeb4f30877228a9a6477b98
#: ../../../../1.8/docs/intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

# 49ebe594890647418b63bbe83dbed918
#: ../../../../1.8/docs/intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""

# 65532563fa0c47589ef436ab42e8a7c1
#: ../../../../1.8/docs/intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""

# b0b2a846b53f4fbc97acc519593a0c81
#: ../../../../1.8/docs/intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

# fef0f608b1824dde9ca7aa45244de7a3
#: ../../../../1.8/docs/intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

# e1e4ef2888a44891826f1827712eeefc
#: ../../../../1.8/docs/intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

# db6d2416f49a4cb7832736f4d15f456d
#: ../../../../1.8/docs/intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

# 03ff725b4ef448c7bf909a969e8745b5
#: ../../../../1.8/docs/intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

# b655991fae5743a98e3eb1d3483e142f
#: ../../../../1.8/docs/intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by design."
"\""
msgstr ""

# 7f47dbec0c99406d852380a2f110da2d
#: ../../../../1.8/docs/intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""

# e222f3b1a111492183a03f5cc43ee15d
#: ../../../../1.8/docs/intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

# 8b0ef1c9f4e84746a761d5035adb01a1
#: ../../../../1.8/docs/intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

# 1c0e8fa2d9dd4273ab186f3929cc1785
#: ../../../../1.8/docs/intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr "基本的なテスト方針"

# 4b387fd7794741deab3757f3904f151b
#: ../../../../1.8/docs/intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

# d9c2cc332a164bb98132973cac2c67b1
#: ../../../../1.8/docs/intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development simply formalizes the problem in a Python test case."
msgstr ""

# 7a090aa96ee4498aa608e424f9fbeed0
#: ../../../../1.8/docs/intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

# 92250d01602f4e108f231d2938597694
#: ../../../../1.8/docs/intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

# cd6b2e85a57c41e8841bd89488c87d6f
#: ../../../../1.8/docs/intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

# 6dfec585e97042d1bfa171c492065b9b
#: ../../../../1.8/docs/intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

# eb5ca55aa86847d189470996c03a7f51
#: ../../../../1.8/docs/intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

# fde4221d585e403c95536531cd3323cb
#: ../../../../1.8/docs/intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Question.was_published_recently()`` method returns "
"``True`` if the ``Question`` was published within the last day (which is "
"correct) but also if the ``Question``’s ``pub_date`` field is in the future "
"(which certainly isn't)."
msgstr ""

# d92113d5bb414fe8af4f77889250aa4a
#: ../../../../1.8/docs/intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a question whose date lies in the "
"future; you'll see that the ``Question`` change list claims it was published "
"recently."
msgstr ""

# 702f50ed038648d4b18b2a479bee729e
#: ../../../../1.8/docs/intro/tutorial05.txt:140
msgid "You can also see this using the :djadmin:`shell`::"
msgstr ""

# 8f3ee9d231274a2aad2aa119887264b5
#: ../../../../1.8/docs/intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

# 348ee480f3a340ddaee03bef62cf1b97
#: ../../../../1.8/docs/intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

# 43ba405a9e1a4d389d02ca1c0c0f22a3
#: ../../../../1.8/docs/intro/tutorial05.txt:156
msgid ""
"What we've just done in the :djadmin:`shell` to test for the problem is "
"exactly what we can do in an automated test, so let's turn that into an "
"automated test."
msgstr ""

# 9b454a3d32a742d4bd499f015fa7bfa2
#: ../../../../1.8/docs/intro/tutorial05.txt:159
msgid ""
"A conventional place for an application's tests is in the application's "
"``tests.py`` file; the testing system will automatically find tests in any "
"file whose name begins with ``test``."
msgstr ""

# f6300c3adce84dc7b9b1da7601840540
#: ../../../../1.8/docs/intro/tutorial05.txt:163
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application:"
msgstr ""

# 6d145d73a76b428792b19a888e488576
#: ../../../../1.8/docs/intro/tutorial05.txt:187
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Question`` instance with a ``pub_date`` in "
"the future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""

# 57a48492984d4b7fb13d7f2e84a98b91
#: ../../../../1.8/docs/intro/tutorial05.txt:193
#, fuzzy
msgid "Running tests"
msgstr "実行中メソッド: %1"

# 4314d0f39f4146b893d183f6fa4982b6
#: ../../../../1.8/docs/intro/tutorial05.txt:195
msgid "In the terminal, we can run our test::"
msgstr ""

# 05a98d820c0f440b82d6b1dc6d4cfc97
#: ../../../../1.8/docs/intro/tutorial05.txt:199
msgid "and you'll see something like::"
msgstr ""

# 94a2ba2c541248fbb36511b4110f060d
#: ../../../../1.8/docs/intro/tutorial05.txt:217
#, fuzzy
msgid "What happened is this:"
msgstr ""
"このディスクは以下のように呼ばれます: \n"
"'%s'\n"

# 211a0e1515b84b8f85f0441a668f6a7f
#: ../../../../1.8/docs/intro/tutorial05.txt:219
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""

# 25106be95c864caf89fff4727af96b14
#: ../../../../1.8/docs/intro/tutorial05.txt:221
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

# e97a54a8203e4b4eb3f42f35cb3a205e
#: ../../../../1.8/docs/intro/tutorial05.txt:223
msgid "it created a special database for the purpose of testing"
msgstr ""

# 66b75eed2b9e4f898c4795d45acfe310
#: ../../../../1.8/docs/intro/tutorial05.txt:225
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

# 76c6a215285649b0903f6770e2bb6a00
#: ../../../../1.8/docs/intro/tutorial05.txt:227
msgid ""
"in ``test_was_published_recently_with_future_question`` it created a "
"``Question`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

# 2a4fccf1ae594ec98ae9db61a7c3b204
#: ../../../../1.8/docs/intro/tutorial05.txt:230
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""

# 879fcd5e1bbe4af4953fffbd5cca3445
#: ../../../../1.8/docs/intro/tutorial05.txt:234
msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""

# fc614150263d459babe5cb97d178a865
#: ../../../../1.8/docs/intro/tutorial05.txt:238
#, fuzzy
msgid "Fixing the bug"
msgstr "バグ退治屋"

# 39bde850fc7d4d78822bedc810a4fe9d
#: ../../../../1.8/docs/intro/tutorial05.txt:240
msgid ""
"We already know what the problem is: ``Question.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past:"
msgstr ""

# 4cd3f9f627704d10aee3ad5c4d0389fc
#: ../../../../1.8/docs/intro/tutorial05.txt:252
#, fuzzy
msgid "and run the test again::"
msgstr "ドラッグアンドドロップのテスト..."

# e878d3c451a44a7f9908a40087339ac7
#: ../../../../1.8/docs/intro/tutorial05.txt:262
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

# de22fbb5de5d4cf887befd64a2a3d475
#: ../../../../1.8/docs/intro/tutorial05.txt:265
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

# 0fb1032ad339463aa29d115254438fae
#: ../../../../1.8/docs/intro/tutorial05.txt:271
#, fuzzy
msgid "More comprehensive tests"
msgstr "詳細はこちら"

# 17346a788b224a4cb08108d8b7074287
#: ../../../../1.8/docs/intro/tutorial05.txt:273
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""

# 6d66f0146aa84c08be927c3c4fedb3b9
#: ../../../../1.8/docs/intro/tutorial05.txt:277
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively:"
msgstr ""

# 237ba48063474604b46beb11fb090966
#: ../../../../1.8/docs/intro/tutorial05.txt:301
msgid ""
"And now we have three tests that confirm that ``Question."
"was_published_recently()`` returns sensible values for past, recent, and "
"future questions."
msgstr ""

# b7ef705d052e477eadbf271d22c7c43a
#: ../../../../1.8/docs/intro/tutorial05.txt:304
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

# b15cec9343b8490aac10dc638e3d515f
#: ../../../../1.8/docs/intro/tutorial05.txt:309
#, fuzzy
msgid "Test a view"
msgstr "ノートを見る"

# 5a0cb784cc194d7198b55899db8871f0
#: ../../../../1.8/docs/intro/tutorial05.txt:311
msgid ""
"The polls application is fairly undiscriminating: it will publish any "
"question, including ones whose ``pub_date`` field lies in the future. We "
"should improve this. Setting a ``pub_date`` in the future should mean that "
"the Question is published at that moment, but invisible until then."
msgstr ""

# 93bf5d404578403faa6805c5999052aa
#: ../../../../1.8/docs/intro/tutorial05.txt:317
#, fuzzy
msgid "A test for a view"
msgstr "ミーテイィング参加者を見る"

# f29489b166564dc6b2289c50cb236c72
#: ../../../../1.8/docs/intro/tutorial05.txt:319
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""

# fa6ee360f7134dcb96dbc08f3c6ded6f
#: ../../../../1.8/docs/intro/tutorial05.txt:323
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""

# ebce2ba172384aef85141a1a3c556b85
#: ../../../../1.8/docs/intro/tutorial05.txt:327
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

# e2d907a160514169aef47810dd960fd5
#: ../../../../1.8/docs/intro/tutorial05.txt:330
#, fuzzy
msgid "The Django test client"
msgstr "サポートの無い DHCP クライアント '%s'"

# 69476c33715e434381568fb9981be90b
#: ../../../../1.8/docs/intro/tutorial05.txt:332
msgid ""
"Django provides a test :class:`~django.test.Client` to simulate a user "
"interacting with the code at the view level.  We can use it in ``tests.py`` "
"or even in the :djadmin:`shell`."
msgstr ""

# 7ce11ccdadc8466584041f6ac2c346bc
#: ../../../../1.8/docs/intro/tutorial05.txt:336
msgid ""
"We will start again with the :djadmin:`shell`, where we need to do a couple "
"of things that won't be necessary in ``tests.py``. The first is to set up "
"the test environment in the :djadmin:`shell`::"
msgstr ""

# af672371b8d74e69a29a5b15dc9e7080
#: ../../../../1.8/docs/intro/tutorial05.txt:343
msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available. "
"Note that this method *does not* setup a test database, so the following "
"will be run against the existing database and the output may differ slightly "
"depending on what questions you already created."
msgstr ""

# a9a59ef2d17c4030b832b83baf7eae6b
#: ../../../../1.8/docs/intro/tutorial05.txt:350
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

# 11b2c47845964febb574d0b4b137a8c2
#: ../../../../1.8/docs/intro/tutorial05.txt:358
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

# b8a4e5725ec64289ba4ed92018c1bd59
#: ../../../../1.8/docs/intro/tutorial05.txt:391
#, fuzzy
msgid "Improving our view"
msgstr "String viewウィジェットの内容"

# d7598effea614fb98afd7621e20519dd
#: ../../../../1.8/docs/intro/tutorial05.txt:393
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

# 4cf9ed1e14e1488a9b1419a9ade78558
#: ../../../../1.8/docs/intro/tutorial05.txt:396
msgid ""
"In :ref:`Tutorial 4 <tutorial04-amend-views>` we introduced a class-based "
"view, based on :class:`~django.views.generic.list.ListView`:"
msgstr ""

# bf4c7f8c0f944bfaac7dc78982bf5e6d
#: ../../../../1.8/docs/intro/tutorial05.txt:410
msgid ""
"We need to amend the ``get_queryset()`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import:"
msgstr ""

# 66010a93d87c460bbae622b8e2d02270
#: ../../../../1.8/docs/intro/tutorial05.txt:419
msgid "and then we must amend the ``get_queryset`` method like so:"
msgstr ""

# 26c48e846c404a07b96addbcca112d6b
#: ../../../../1.8/docs/intro/tutorial05.txt:433
msgid ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` returns a queryset "
"containing ``Question``\\s whose ``pub_date`` is less than or equal to - "
"that is, earlier than or equal to - ``timezone.now``."
msgstr ""

# f87a80e0e4f448188144cebc5b55012d
#: ../../../../1.8/docs/intro/tutorial05.txt:438
#, fuzzy
msgid "Testing our new view"
msgstr "新しい記録簿のデフォルト表示スタイル"

# aac7fb7212dc4f2bb25f24984f8c784a
#: ../../../../1.8/docs/intro/tutorial05.txt:440
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Questions`` with "
"dates in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our :djadmin:`shell` session above."
msgstr ""

# 405e6b488f9a462aa5074a5f12ce585f
#: ../../../../1.8/docs/intro/tutorial05.txt:447
msgid "Add the following to ``polls/tests.py``:"
msgstr ""

# 6a6a3ded7a8e410199adb838db4b2d7a
#: ../../../../1.8/docs/intro/tutorial05.txt:454
msgid ""
"and we'll create a shortcut function to create questions as well as a new "
"test class:"
msgstr ""

# 1b2f4af7ecfa42bf9a1e179f402d2990
#: ../../../../1.8/docs/intro/tutorial05.txt:530
msgid "Let's look at some of these more closely."
msgstr ""

# d7707e3e7f3c4a30af9df98e86f9f32d
#: ../../../../1.8/docs/intro/tutorial05.txt:532
msgid ""
"First is a question shortcut function, ``create_question``, to take some "
"repetition out of the process of creating questions."
msgstr ""

# 4d84c2fb8fc4499186c88846b1516b59
#: ../../../../1.8/docs/intro/tutorial05.txt:535
msgid ""
"``test_index_view_with_no_questions`` doesn't create any questions, but "
"checks the message: \"No polls are available.\" and verifies the "
"``latest_question_list`` is empty. Note that the :class:`django.test."
"TestCase` class provides some additional assertion methods. In these "
"examples, we use :meth:`~django.test.SimpleTestCase.assertContains()` and :"
"meth:`~django.test.TransactionTestCase.assertQuerysetEqual()`."
msgstr ""

# 26dfd1a304dc41d7bb8ef8e360fb0321
#: ../../../../1.8/docs/intro/tutorial05.txt:542
msgid ""
"In ``test_index_view_with_a_past_question``, we create a question and verify "
"that it appears in the list."
msgstr ""

# bfa569897a6a4982b512165e6e58f047
#: ../../../../1.8/docs/intro/tutorial05.txt:545
msgid ""
"In ``test_index_view_with_a_future_question``, we create a question with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first question is no longer there, and so again the index shouldn't have "
"any questions in it."
msgstr ""

# 002c90e205e14df4a0f4425752e5b516
#: ../../../../1.8/docs/intro/tutorial05.txt:550
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

# 80c21c19374748c594b72d5f0638adc5
#: ../../../../1.8/docs/intro/tutorial05.txt:555
#, fuzzy
msgid "Testing the ``DetailView``"
msgstr "クリーンURLのテスト..."

# d98176a01d9e4da58abeda19625949e8
#: ../../../../1.8/docs/intro/tutorial05.txt:557
msgid ""
"What we have works well; however, even though future questions don't appear "
"in the *index*, users can still reach them if they know or guess the right "
"URL. So we need to add a similar  constraint to ``DetailView``:"
msgstr ""

# e2fad3d6182c4f199babecd00b8a34f6
#: ../../../../1.8/docs/intro/tutorial05.txt:572
msgid ""
"And of course, we will add some tests, to check that a ``Question`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not:"
msgstr ""

# 9a369dd50fad49e3b3530f34b5126b25
#: ../../../../1.8/docs/intro/tutorial05.txt:605
msgid "Ideas for more tests"
msgstr ""

# ff81a83e62144234b5662d43b8b6799f
#: ../../../../1.8/docs/intro/tutorial05.txt:607
msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have "
"just created; in fact there will be a lot of repetition."
msgstr ""

# b1d50af1fa6d46f3be75153715dc6351
#: ../../../../1.8/docs/intro/tutorial05.txt:611
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Questions`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Questions``. Our tests would create a ``Question`` without "
"``Choices`` and then test that it's not published, as well as create a "
"similar ``Question`` *with* ``Choices``, and test that it *is* published."
msgstr ""

# 7b3442dcac854dc0bb3e6279286a86b7
#: ../../../../1.8/docs/intro/tutorial05.txt:618
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Questions``, but not ordinary visitors. Again: whatever needs to be added "
"to the software to accomplish this should be accompanied by a test, whether "
"you write the test first and then make the code pass the test, or work out "
"the logic in your code first and then write a test to prove it."
msgstr ""

# 566710e1db644fbc8bf0e8ab5952e182
#: ../../../../1.8/docs/intro/tutorial05.txt:624
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

# bb847c82df4a45ae943c19abb4a8ce21
#: ../../../../1.8/docs/intro/tutorial05.txt:628
msgid "When testing, more is better"
msgstr ""

# dcfe2977ba3140bbad1d0dbab5ff5fa1
#: ../../../../1.8/docs/intro/tutorial05.txt:630
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

# 22787f0246df45d6b0fec5aabf76e1fc
#: ../../../../1.8/docs/intro/tutorial05.txt:634
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

# 9a396e0b18d04350bd555607c57d1a28
#: ../../../../1.8/docs/intro/tutorial05.txt:638
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Questions`` with ``Choices`` are published. In that case, many "
"of our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

# dbac1a72d6684ae78f1947de988f646b
#: ../../../../1.8/docs/intro/tutorial05.txt:643
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

# 4578a750fbf646b3b84e7dd772d07e1f
#: ../../../../1.8/docs/intro/tutorial05.txt:647
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""

# 3474bb4edf4149dcbc86a51dd80b95bc
#: ../../../../1.8/docs/intro/tutorial05.txt:650
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

# 50fc5c5a5f6a41219f0d80c2397d2e37
#: ../../../../1.8/docs/intro/tutorial05.txt:651
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

# 31eb77cf078140808ada09ea4855d365
#: ../../../../1.8/docs/intro/tutorial05.txt:652
msgid "test method names that describe their function"
msgstr ""

# 507f8ee21c6143e6a1173f25e3403aeb
#: ../../../../1.8/docs/intro/tutorial05.txt:655
#, fuzzy
msgid "Further testing"
msgstr "クリーンURLのテスト..."

# 94d5fe35915e412e995050a7148bd44a
#: ../../../../1.8/docs/intro/tutorial05.txt:657
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""

# f524e6bb55174457a5a0eb07bfc95067
#: ../../../../1.8/docs/intro/tutorial05.txt:661
msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""

# daadddf29a8f4260b56be557e963f2c8
#: ../../../../1.8/docs/intro/tutorial05.txt:670
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

# 648a343765da4122af4cb0e1ddf35e1d
#: ../../../../1.8/docs/intro/tutorial05.txt:674
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""

# 190aba4f5cf64ec8aea79b5e4fea95f8
#: ../../../../1.8/docs/intro/tutorial05.txt:680
msgid ""
":doc:`Testing in Django </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""

# caefa886f3d044e591eb7cb7e0bb2148
#: ../../../../1.8/docs/intro/tutorial05.txt:689
msgid ""
"For full details on testing, see :doc:`Testing in Django </topics/testing/"
"index>`."
msgstr ""

# 86f67c9070af4df78e47df6f53d7bf9d
#: ../../../../1.8/docs/intro/tutorial05.txt:692
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this "
"tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""

# 1c6001da4ad545d9848d2cacb636c26c
#: ../../../../1.8/docs/intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr "はじめての Django アプリ作成、その 6"

# 7f4135b3f79b4504a6f58f89d5f45eba
#: ../../../../1.8/docs/intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""
"このチュートリアルは :doc:`チュートリアル 5 </intro/tutorial05>` の続きです。"
"Web 投票アプリケーションのテストが完成したので、今度はスタイルシートや画像を"
"追加しましょう。"

# 6ac4ce419a1b4b40bd1e70f28c617103
#: ../../../../1.8/docs/intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need "
"to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""
"サーバで生成するHTML以外に、Webアプリケーションは一般的に完全なWebページをレ"
"ンダリングするために、画像、JavaScript、CSSなど必要なファイルを提供する必要が"
"あります。Djangoでは、これらのファイルを \"静的ファイル\" と呼びます。"

# f6abc304d5d241959fa961f6f18e2954
#: ../../../../1.8/docs/intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""
"小さなプロジェクトではこのことは大きな問題になりません。 Web サーバが見つけら"
"れる場所で静的ファイルを単に管理することができるからです。しかし、もっと大き"
"な プロジェクトで、特に複数のアプリケーションからなる場合は、各アプリケーショ"
"ンが 持っている静的ファイルの集まりを複数扱うことになり、ややこしくなってきま"
"す。"

# a07f21a5cb584bb69051f1cbe5e54f5c
#: ../../../../1.8/docs/intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""
"``django.contrib.staticfiles`` はまさにそのためにあります。これは静的なファ"
"イ ルを各アプリケーションから (さらに指定した別の場所からも) 一つの場所に集"
"め、運用環境で公開しやすくするものです。"

# 1ff9890cea6346bc8dbe4160389571e7
#: ../../../../1.8/docs/intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr "*アプリ* の構造をカスタマイズする"

# ede7f47c4474460da2b77c515e50bdd7
#: ../../../../1.8/docs/intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""
"最初に、 ``polls`` ディレクトリの中に、 ``static`` ディレクトリを作成します。"
"Django はそこから静的ファイルを探します。Django が ``polls/templates/`` から"
"テンプレートを探す方法と同様です。"

# 4e83fc7d67264764b2e9d712b5d0e7ee
#: ../../../../1.8/docs/intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

# d655187b7f454a988605f0db66a03b8e
#: ../../../../1.8/docs/intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called ``style."
"css``. In other words, your stylesheet should be at ``polls/static/polls/"
"style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder "
"works, you can refer to this static file in Django simply as ``polls/style."
"css``, similar to how you reference the path for templates."
msgstr ""

# 56225995648f4d85b50e908cb676a076
#: ../../../../1.8/docs/intro/tutorial06.txt:45
msgid "Static file namespacing"
msgstr "静的ファイルの名前空間"

# 237f9d302bf84cf3afbb3b032ef58ed6
#: ../../../../1.8/docs/intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

# 8290fb5dbede4b3ab4dc9e0f9a356ef6
#: ../../../../1.8/docs/intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""
"スタイルシートに次のコードを配置します (``polls/static/polls/style.css``):"

# e151edce53b246ae85b19813cdf91275
#: ../../../../1.8/docs/intro/tutorial06.txt:66
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr "次に、``polls/templates/polls/index.html`` の上部に追加します:"

# 1ad6f326bc494709889a166ab1115a58
#: ../../../../1.8/docs/intro/tutorial06.txt:75
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

# 1f30aaa6252e4b30b40d28feac41b5c1
#: ../../../../1.8/docs/intro/tutorial06.txt:79
msgid ""
"That's all you need to do for development. Reload ``http://localhost:8000/"
"polls/`` and you should see that the question links are green (Django "
"style!) which means that your stylesheet was properly loaded."
msgstr ""

# 9b36fa47d9df49adaa43cec43ea40236
#: ../../../../1.8/docs/intro/tutorial06.txt:84
#, fuzzy
msgid "Adding a background-image"
msgstr "画像処理エラー"

# eb133e1ef9454ce18030ea5771a6b072
#: ../../../../1.8/docs/intro/tutorial06.txt:86
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

# 745fe9bf351245d29d699c7126ffddc0
#: ../../../../1.8/docs/intro/tutorial06.txt:91
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# 84d31f3f0a3e4fe781db9f9f46bcad49
#: ../../../../1.8/docs/intro/tutorial06.txt:100
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

# f2299b20d82347ac80d4f394c36056c6
#: ../../../../1.8/docs/intro/tutorial06.txt:105
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the :ttag:"
"`static` template tag to generate its URLs) without having to modify a bunch "
"of paths in your static files as well."
msgstr ""

# 53b6b74aa2ea4c5495f9f47dab0d49d0
#: ../../../../1.8/docs/intro/tutorial06.txt:112
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and :doc:`the staticfiles reference </ref/contrib/"
"staticfiles>`. :doc:`Deploying static files </howto/static-files/"
"deployment>` discusses how to use static files on a real server."
msgstr ""

# b30f7347d45c4e2e8192ccd104ce4e38
#: ../../../../1.8/docs/intro/tutorial06.txt:122
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here </intro/"
"whatsnext>`."
msgstr ""

# fea6ac484c3d4ce386d7cf63d462d8d8
#: ../../../../1.8/docs/intro/tutorial06.txt:126
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""

# 6a372adda08d4082b0734139dc6dccd3
#: ../../../../1.8/docs/intro/whatsnext.txt:3
#, fuzzy
msgid "What to read next"
msgstr "次に表示するヒント。"

# d75bd25866194d2082123a90639ef314
#: ../../../../1.8/docs/intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""

# 58e9a131febc46e5a9d1271eb9daff13
#: ../../../../1.8/docs/intro/whatsnext.txt:10
#, fuzzy
msgid "So what's next?"
msgstr "次の入力メソッド(_N):"

# 383442df9fbb475da041a7145b5448e5
#: ../../../../1.8/docs/intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

# dbb09a67df8c444aa35379c918585c1e
#: ../../../../1.8/docs/intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to "
"read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

# e0a8779fb3b945bcb560d5489021bf20
#: ../../../../1.8/docs/intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

# 0a6cf85e6cf7464b9729716bc94663e9
#: ../../../../1.8/docs/intro/whatsnext.txt:24
#, fuzzy
msgid "Finding documentation"
msgstr "ドキュメントを表示する"

# 05b85d348cfb491aafe25a6989bdd479
#: ../../../../1.8/docs/intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A few good places to "
"start are the :ref:`search` and the :ref:`genindex`."
msgstr ""

# 89bfa81cda3b4f54ad6ded5cdfdbbba5
#: ../../../../1.8/docs/intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

# 7baab2dc6a9946159485cf239bd4106a
#: ../../../../1.8/docs/intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

# 14568255497a41808c162e7cf86951dd
#: ../../../../1.8/docs/intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

# 022258ec0d1a4179b13c60d76381c63f
#: ../../../../1.8/docs/intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

# 6a9c13f12c0d430491328e6ab48424b3
#: ../../../../1.8/docs/intro/whatsnext.txt:43
msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's :doc:"
"`model system </topics/db/index>`, :doc:`template engine </topics/"
"templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""

# b02a01bf5ccc4e7d92618e8d17fd6ed5
#: ../../../../1.8/docs/intro/whatsnext.txt:49
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

# 9302c743b31943ad9ea9f3a529e35d68
#: ../../../../1.8/docs/intro/whatsnext.txt:53
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about :doc:"
"`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom "
"template tags </howto/custom-template-tags>`, and more."
msgstr ""

# 8f789da072294343bb92b4fd4cac0ae1
#: ../../../../1.8/docs/intro/whatsnext.txt:59
msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ </faq/"
"index>`."
msgstr ""

# b81866f81ad942868bb8588689d9d879
#: ../../../../1.8/docs/intro/whatsnext.txt:62
msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whatever you need."
msgstr ""

# 553b680ea21647abbcc316b1725d0198
#: ../../../../1.8/docs/intro/whatsnext.txt:69
msgid ""
"If you are interested in deploying a project for public use, our docs have :"
"doc:`several guides</howto/deployment/index>` for various deployment setups "
"as well as a :doc:`deployment checklist</howto/deployment/checklist>` for "
"some things you'll need to think about."
msgstr ""

# 0b62b7cbd75e485fb723949298402c27
#: ../../../../1.8/docs/intro/whatsnext.txt:74
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that simply don't "
"fit elsewhere </misc/index>`."
msgstr ""

# f479759690eb47e6a6b7032383934e5a
#: ../../../../1.8/docs/intro/whatsnext.txt:82
msgid "How documentation is updated"
msgstr ""

# 0db744b3dfdd4949a0015d1abb05c556
#: ../../../../1.8/docs/intro/whatsnext.txt:84
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

# 431809d5311b429e9b5cad2f9235bfad
#: ../../../../1.8/docs/intro/whatsnext.txt:88
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

# f8f55c73b44b4b80b43ed2c316aeae7f
#: ../../../../1.8/docs/intro/whatsnext.txt:90
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

# 5e2aac1824194a37b71f1f98e4d1e05e
#: ../../../../1.8/docs/intro/whatsnext.txt:93
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

# 855d091456034e8e94cc17eadb351294
#: ../../../../1.8/docs/intro/whatsnext.txt:96
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

# ace30ab761364d83918beec781948a5f
#: ../../../../1.8/docs/intro/whatsnext.txt:99
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document "
"online is a separate text file in the repository."
msgstr ""

# 066715752b0e4d68813b02597f5bb4d3
#: ../../../../1.8/docs/intro/whatsnext.txt:106
#, fuzzy
msgid "Where to get it"
msgstr "タイトルを取得できませんでした。"

# 4d4b0a3aa690467da78d751b4408c1f9
#: ../../../../1.8/docs/intro/whatsnext.txt:108
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

# 296e4bdefa7944e9a1b28ebd9274e6c9
#: ../../../../1.8/docs/intro/whatsnext.txt:112
#, fuzzy
msgid "On the Web"
msgstr "ウェブギャラリー(_G)..."

# 986b1a72eb624e0abf909778d28b00d4
#: ../../../../1.8/docs/intro/whatsnext.txt:114
msgid ""
"The most recent version of the Django documentation lives at https://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See \"Differences "
"between versions\" below.)"
msgstr ""

# d38ac2b668574edca65276e6db19c5f0
#: ../../../../1.8/docs/intro/whatsnext.txt:122
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""

# d2615e3cb972499595db4e407392444d
#: ../../../../1.8/docs/intro/whatsnext.txt:126
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the |django-users| mailing list or the `#django "
"IRC channel`_ instead."
msgstr ""

# 5159d4a711d649c2a555d565ba67a7f0
#: ../../../../1.8/docs/intro/whatsnext.txt:135
#, fuzzy
msgid "In plain text"
msgstr "プレーンテキストとして貼り付け"

# 207ff222be53498cb9d4f111c1ae2ef7
#: ../../../../1.8/docs/intro/whatsnext.txt:137
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

# dc41f7bcba194af0882c94754d85150e
#: ../../../../1.8/docs/intro/whatsnext.txt:140
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""

# fe8b6087035e4c96aeaecff3a1014cdd
#: ../../../../1.8/docs/intro/whatsnext.txt:144
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that "
"the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

# cff008435b974f749ef3e56465c50d27
#: ../../../../1.8/docs/intro/whatsnext.txt:148
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

# aa7a5990b2f445efb48a471fb55913f5
#: ../../../../1.8/docs/intro/whatsnext.txt:158
#, fuzzy
msgid "As HTML, locally"
msgstr "ローカルに退避 (divert) された: %s\n"

# 4e38cdfc4e76495cbe3cdf73d440689f
#: ../../../../1.8/docs/intro/whatsnext.txt:160
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

# 90ff17b9f52c430eb0c9ad30f3cecdc2
#: ../../../../1.8/docs/intro/whatsnext.txt:162
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

# 7541f861e10649afa1e4cbc516135747
#: ../../../../1.8/docs/intro/whatsnext.txt:170
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

# 820cb21bec0847298213623fbbd03e6e
#: ../../../../1.8/docs/intro/whatsnext.txt:178
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

# 95c520e30b604ed3b89f6342e586afb9
#: ../../../../1.8/docs/intro/whatsnext.txt:180
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

# 8be9f943b3c34a2fbbdc811f9fd9e9bc
#: ../../../../1.8/docs/intro/whatsnext.txt:187
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

# 3b4812b436034e8ba576a512facf35f9
#: ../../../../1.8/docs/intro/whatsnext.txt:191
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

# 2543248356c04bc5a99ccac0b50105bc
#: ../../../../1.8/docs/intro/whatsnext.txt:200
#, fuzzy
msgid "Differences between versions"
msgstr "利用可能なバージョンはありません。"

# dc01b8f5ab7645f097c21da54eb926a6
#: ../../../../1.8/docs/intro/whatsnext.txt:202
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

# 30a9ac565eee4aa385024baae2517e81
#: ../../../../1.8/docs/intro/whatsnext.txt:209
msgid "We follow this policy:"
msgstr ""

# 5635393526a14a1aa82d45c2bcbc899e
#: ../../../../1.8/docs/intro/whatsnext.txt:211
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

# 2a7c87ad20d643e4aa260930d61b9ed9
#: ../../../../1.8/docs/intro/whatsnext.txt:216
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

# c0ccf5567a614f15bddc951cc50673fd
#: ../../../../1.8/docs/intro/whatsnext.txt:219
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

# 25ef22edbda744cab2a0c96afc2b9a15
#: ../../../../1.8/docs/intro/whatsnext.txt:223
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is :ref:`no longer supported<backwards-compatibility-policy>`, that "
"version of the docs won't get any further updates."
msgstr ""

# 2f731e6df6684a3486f08a86a184b5b5
#: ../../../../1.8/docs/intro/whatsnext.txt:228
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
